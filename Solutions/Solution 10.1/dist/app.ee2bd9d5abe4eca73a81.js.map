{"version":3,"sources":["webpack:///app.ee2bd9d5abe4eca73a81.js","webpack:///./src/main.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/reviews/reviews.module.ts","webpack:///./src/app/common/shared.module.ts","webpack:///./src/app/common/drag-and-drop.directive.ts","webpack:///./src/app/common/rest-helper.service.ts","webpack:///./src/app/common/no-image.pipe.ts","webpack:///./src/app/reviews/review.service.ts","webpack:///./~/rxjs/add/operator/toPromise.js","webpack:///./~/rxjs/operator/toPromise.js","webpack:///./~/@angular/forms/bundles/forms.umd.js","webpack:///./src/app/reviews/review-form.component.ts","webpack:///./src/app/models/Review.model.ts","webpack:///./src/app/reviews/reviews-routes.module.ts","webpack:///./src/app/reviews/review-list.component.ts","webpack:///./src/app/common/animations.ts","webpack:///./src/app/books/book.service.ts","webpack:///./~/rxjs/add/operator/catch.js","webpack:///./~/rxjs/add/operator/map.js","webpack:///./src/app/app-routes.module.ts","webpack:///./src/app/about.component.ts","webpack:///./src/app/about.component.html","webpack:///./src/app/books/book-list.component.ts","webpack:///./~/rxjs/add/operator/debounceTime.js","webpack:///./~/rxjs/operator/debounceTime.js","webpack:///./~/rxjs/scheduler/async.js","webpack:///./~/rxjs/scheduler/AsyncAction.js","webpack:///./~/rxjs/scheduler/Action.js","webpack:///./~/rxjs/scheduler/AsyncScheduler.js","webpack:///./~/rxjs/Scheduler.js","webpack:///./~/rxjs/add/operator/switchMap.js","webpack:///./~/rxjs/operator/switchMap.js","webpack:///./src/app/books/books.module.ts","webpack:///./src/app/books/book-form.component.ts","webpack:///./src/app/models/Book.model.ts","webpack:///./src/app/app.component.ts"],"names":["webpackJsonp","module","exports","__webpack_require__","platform_browser_dynamic_1","core_1","app_module_1","enableProdMode","platformBrowserDynamic","bootstrapModule","AppModule","__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","reviews_module_1","app_routes_module_1","books_module_1","platform_browser_1","app_component_1","about_component_1","http_1","NgModule","imports","BrowserModule","BooksModule","ReviewsModule","AppRoutesModule","HttpModule","declarations","AppComponent","AboutComponent","bootstrap","shared_module_1","review_service_1","forms_1","review_form_component_1","common_1","reviews_routes_module_1","review_list_component_1","CommonModule","ReviewsRoutesModule","FormsModule","SharedModule","ReviewListComponent","ReviewFormComponent","providers","ReviewService","drag_and_drop_directive_1","rest_helper_service_1","no_image_pipe_1","NoImagePipe","DragAndDropDirective","RestHelperService","el","onDropped","EventEmitter","prototype","onDragOver","event","preventDefault","nativeElement","style","onDragLeave","onDrop","emit","Output","_a","HostListener","Function","Directive","selector","_b","ElementRef","url","headers","Headers","content-type","handleError","error","Promise","reject","buildErrorString","message","status","statusText","Injectable","transform","value","defaultImage","Pipe","name","http","restHelper","getReviews","bookId","get","toPromise","then","res","json","addReview","review","post","Http","Observable_1","toPromise_1","Observable","PromiseCtor","_this","root_1","root","Rx","config","Error","resolve","subscribe","x","err","global","factory","_angular_core","rxjs_operator_toPromise","rxjs_Subject","rxjs_Observable","rxjs_observable_fromPromise","isPresent","obj","isBlank","looseIdentical","a","b","isNaN","isJsObject","o","isPrimitive","isEmptyInputValue","_convertToPromise","isPromise","call","_executeValidators","control","validators","map","_executeAsyncValidators","_mergeErrors","arrayOfErrors","reduce","errors","StringMapWrapper","merge","keys","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","_buildValueString","id","slice","_extractId","valueString","split","_buildValueString$1","_extractId$1","controlPath","parent","path","concat","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","registerOnChange","newValue","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","registerOnTouched","markAsTouched","emitModelEvent","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","forEach","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","messageEnd","join","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","hasOwnProperty","change","isFirstChange","currentValue","isBuiltInAccessor","BUILTIN_ACCESSORS","some","constructor","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","Array","FormGroup","controls","FormArray","at","toObservable","fromPromise","coerceToValidator","isArray","coerceToAsyncValidator","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","AbstractControlDirective","enumerable","configurable","valid","invalid","pending","pristine","dirty","touched","untouched","disabled","enabled","statusChanges","valueChanges","reset","undefined","hasError","errorCode","getError","__extends$1","__extends","__","p","create","ControlContainer","_super","apply","m1","m2","m","_i","_c","equals","k1","k2","ListWrapper","findLast","arr","condition","removeAll","list","items","index","indexOf","splice","remove","flatten","flat","item","flatItem","__core_private__","NG_VALIDATORS","OpaqueToken","NG_ASYNC_VALIDATORS","required","requiredTrue","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","RegExp","toString","test","requiredPattern","actualValue","presentValidators","filter","promises","all","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","forwardRef","CheckboxControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","setElementProperty","fn","type","args","host","(change)","(blur)","ctorParameters","Renderer","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","parseFloat","__extends$2","NgControl","_parent","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","add","accessor","push","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","ngOnInit","_checkName","ngOnDestroy","_state","_fn","formControlName","_throwNameError","Injector","propDecorators","Input","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_optionMap","Map","_idCounter","_getOptionId","_getOptionValue","_registerOption","from","has","NgSelectOption","_element","_select","set","_setElementValue","Optional","Host","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","options","selectedOptions","val","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","__extends$3","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","NgControlStatus","Self","NgControlStatusGroup","__extends$5","isAsync","__isAsync","next","generatorOrNext","complete","schedulerFn","errorFn","completeFn","setTimeout","Subject","__extends$6","VALID","INVALID","PENDING","DISABLED","AbstractControl","_onCollectionChange","_pristine","_touched","_onDisabledChange","_status","_errors","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","changeFn","enable","setParent","patchValue","_setInitialStatus","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_cancelExistingSubscription","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","_initObservables","_anyControlsHaveStatus","cb","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","FormControl","_onChange","_applyFormState","emitViewToModelChange","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","_registerControl","insert","removeAt","__extends$4","formDirectiveProvider","NgForm","resolvedPromise","asyncValidators","_submitted","ngSubmit","form","container","_findContainer","getControl","group","updateModel","onSubmit","$event","onReset","resetForm","pop","(submit)","(reset)","outputs","exportAs","Inject","Examples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","__extends$8","modelGroupProvider","NgModelGroup","SkipSelf","__extends$7","formControlBinding","NgModel","resolvedPromise$1","_registered","update","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","console","warn","__extends$9","formControlBinding$1","FormControlDirective","_isControlChanged","__extends$11","formDirectiveProvider$1","directives","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","__extends$12","formGroupNameProvider","formArrayNameProvider","__extends$10","controlNameBinding","FormControlName","_added","__extends$13","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","VERSION","Version","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","ReactiveFormsModule","Review_model_1","reviewService","reviewAdded","submit","errorMessage","Number","Component","template","Review","content","router_1","reviewsRoutes","component","RouterModule","forChild","animations_1","book_service_1","route","bookService","snapshot","params","getBook","book","reviews","animations","routeChange","[@routeChange]","ActivatedRoute","BookService","trigger","state","position","width","transition","animate","opacity","slideUp","keyframes","offset","getBooks","getBooksByTitle","title","addBook","handleObservableError","catch_1","_catch","map_1","book_list_component_1","routes","BookListComponent","redirectTo","forRoot","BehaviorSubject_1","searchTermStream","BehaviorSubject","books","debounceTime","switchMap","term","search","trackBook","debounceTime_1","dueTime","scheduler","async_1","lift","DebounceTimeOperator","dispatchNext","subscriber","debouncedNext","Subscriber_1","source","DebounceTimeSubscriber","destination","debouncedSubscription","lastValue","hasValue","_next","clearDebounce","schedule","_complete","Subscriber","AsyncAction_1","AsyncScheduler_1","AsyncScheduler","AsyncAction","Action_1","work","delay","closed","recycleAsyncId","requestAsyncId","setInterval","flush","bind","clearInterval","execute","_execute","errored","errorValue","e","_unsubscribe","actions","Action","Subscription_1","Subscription","Scheduler_1","active","scheduled","action","shift","Scheduler","SchedulerAction","now","Date","switchMap_1","project","resultSelector","SwitchMapOperator","OuterSubscriber_1","subscribeToResult_1","SwitchMapSubscriber","result","_innerSub","innerSubscription","subscribeToResult","notifyComplete","innerSub","isStopped","notifyNext","outerValue","innerValue","outerIndex","innerIndex","_tryNotifyNext","OuterSubscriber","book_form_component_1","BookFormComponent","Book_model_1","formBuilder","cover","createBook","bookForm","author","sub","toTitleCase","s","replace","t","charAt","toUpperCase","substr","toLowerCase","oldHeight","oldWidth","newHeight","newWidth","comp","size","files","dataTransfer","f","reader","FileReader","onload","e2","image","Image","height","oldWidth_1","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","src","readAsDataURL","Book","styles"],"mappings":"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","file":"app.ee2bd9d5abe4eca73a81.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar platform_browser_dynamic_1 = __webpack_require__(1);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar app_module_1 = __webpack_require__(23);\r\n\tif (true) {\r\n\t    core_1.enableProdMode();\r\n\t}\r\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\r\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar reviews_module_1 = __webpack_require__(24);\r\n\tvar app_routes_module_1 = __webpack_require__(74);\r\n\tvar books_module_1 = __webpack_require__(87);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar platform_browser_1 = __webpack_require__(21);\r\n\tvar app_component_1 = __webpack_require__(90);\r\n\tvar about_component_1 = __webpack_require__(75);\r\n\tvar http_1 = __webpack_require__(28);\r\n\tvar AppModule = (function () {\r\n\t    function AppModule() {\r\n\t    }\r\n\t    AppModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [\r\n\t                platform_browser_1.BrowserModule, books_module_1.BooksModule, reviews_module_1.ReviewsModule, app_routes_module_1.AppRoutesModule, http_1.HttpModule\r\n\t            ],\r\n\t            declarations: [\r\n\t                app_component_1.AppComponent, about_component_1.AboutComponent\r\n\t            ],\r\n\t            bootstrap: [app_component_1.AppComponent]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AppModule);\r\n\t    return AppModule;\r\n\t}());\r\n\texports.AppModule = AppModule;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar shared_module_1 = __webpack_require__(25);\r\n\tvar review_service_1 = __webpack_require__(30);\r\n\tvar forms_1 = __webpack_require__(33);\r\n\tvar review_form_component_1 = __webpack_require__(36);\r\n\tvar common_1 = __webpack_require__(22);\r\n\tvar reviews_routes_module_1 = __webpack_require__(38);\r\n\tvar review_list_component_1 = __webpack_require__(69);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar ReviewsModule = (function () {\r\n\t    function ReviewsModule() {\r\n\t    }\r\n\t    ReviewsModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [common_1.CommonModule, reviews_routes_module_1.ReviewsRoutesModule, forms_1.FormsModule, shared_module_1.SharedModule],\r\n\t            declarations: [review_list_component_1.ReviewListComponent, review_form_component_1.ReviewFormComponent],\r\n\t            providers: [review_service_1.ReviewService]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], ReviewsModule);\r\n\t    return ReviewsModule;\r\n\t}());\r\n\texports.ReviewsModule = ReviewsModule;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar drag_and_drop_directive_1 = __webpack_require__(26);\r\n\tvar rest_helper_service_1 = __webpack_require__(27);\r\n\tvar no_image_pipe_1 = __webpack_require__(29);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar SharedModule = (function () {\r\n\t    function SharedModule() {\r\n\t    }\r\n\t    SharedModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            declarations: [no_image_pipe_1.NoImagePipe, drag_and_drop_directive_1.DragAndDropDirective],\r\n\t            exports: [no_image_pipe_1.NoImagePipe, drag_and_drop_directive_1.DragAndDropDirective],\r\n\t            providers: [rest_helper_service_1.RestHelperService]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], SharedModule);\r\n\t    return SharedModule;\r\n\t}());\r\n\texports.SharedModule = SharedModule;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar DragAndDropDirective = (function () {\r\n\t    function DragAndDropDirective(el) {\r\n\t        this.el = el;\r\n\t        this.onDropped = new core_1.EventEmitter();\r\n\t    }\r\n\t    DragAndDropDirective.prototype.onDragOver = function (event) {\r\n\t        event.preventDefault();\r\n\t        this.el.nativeElement.style = 'border: 1px solid black';\r\n\t    };\r\n\t    DragAndDropDirective.prototype.onDragLeave = function (event) {\r\n\t        event.preventDefault();\r\n\t        this.el.nativeElement.style = 'border: none';\r\n\t    };\r\n\t    DragAndDropDirective.prototype.onDrop = function (event) {\r\n\t        event.preventDefault();\r\n\t        this.el.nativeElement.style = 'border: none';\r\n\t        this.onDropped.emit(event);\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Output(), \r\n\t        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)\r\n\t    ], DragAndDropDirective.prototype, \"onDropped\", void 0);\r\n\t    __decorate([\r\n\t        core_1.HostListener('dragover', ['$event']), \r\n\t        __metadata('design:type', Function), \r\n\t        __metadata('design:paramtypes', [Object]), \r\n\t        __metadata('design:returntype', void 0)\r\n\t    ], DragAndDropDirective.prototype, \"onDragOver\", null);\r\n\t    __decorate([\r\n\t        core_1.HostListener('dragleave', ['$event']), \r\n\t        __metadata('design:type', Function), \r\n\t        __metadata('design:paramtypes', [Object]), \r\n\t        __metadata('design:returntype', void 0)\r\n\t    ], DragAndDropDirective.prototype, \"onDragLeave\", null);\r\n\t    __decorate([\r\n\t        core_1.HostListener('drop', ['$event']), \r\n\t        __metadata('design:type', Function), \r\n\t        __metadata('design:paramtypes', [Object]), \r\n\t        __metadata('design:returntype', void 0)\r\n\t    ], DragAndDropDirective.prototype, \"onDrop\", null);\r\n\t    DragAndDropDirective = __decorate([\r\n\t        core_1.Directive({\r\n\t            selector: '[bkDragDrop]'\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [(typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object])\r\n\t    ], DragAndDropDirective);\r\n\t    return DragAndDropDirective;\r\n\t    var _a, _b;\r\n\t}());\r\n\texports.DragAndDropDirective = DragAndDropDirective;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(28);\r\n\tvar RestHelperService = (function () {\r\n\t    function RestHelperService() {\r\n\t        this.url = ( true)\r\n\t            ? \"http://localhost:5555/api/bookreactions/\"\r\n\t            : \"http://localhost:3000/api/bookreactions/\";\r\n\t        this.headers = new http_1.Headers({\r\n\t            'content-type': 'application/json'\r\n\t        });\r\n\t    }\r\n\t    RestHelperService.prototype.handleError = function (error) {\r\n\t        return Promise.reject(this.buildErrorString(error));\r\n\t    };\r\n\t    RestHelperService.prototype.buildErrorString = function (error) {\r\n\t        return error.message ? error.message : error.status ? error.status + \" - \" + error.statusText : 'Server error';\r\n\t    };\r\n\t    RestHelperService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], RestHelperService);\r\n\t    return RestHelperService;\r\n\t}());\r\n\texports.RestHelperService = RestHelperService;\r\n\n\n/***/ },\n/* 28 */,\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar NoImagePipe = (function () {\r\n\t    function NoImagePipe() {\r\n\t    }\r\n\t    NoImagePipe.prototype.transform = function (value, defaultImage) {\r\n\t        defaultImage = defaultImage ? defaultImage : '/public/images/NoImage.png';\r\n\t        return value ? value : defaultImage;\r\n\t    };\r\n\t    NoImagePipe = __decorate([\r\n\t        core_1.Pipe({ name: 'noImage' }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], NoImagePipe);\r\n\t    return NoImagePipe;\r\n\t}());\r\n\texports.NoImagePipe = NoImagePipe;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar rest_helper_service_1 = __webpack_require__(27);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(28);\r\n\t__webpack_require__(31);\r\n\tvar ReviewService = (function () {\r\n\t    function ReviewService(http, restHelper) {\r\n\t        this.http = http;\r\n\t        this.restHelper = restHelper;\r\n\t    }\r\n\t    ReviewService.prototype.getReviews = function (bookId) {\r\n\t        return this.http.get(this.restHelper.url + \"Reviews/\" + bookId)\r\n\t            .toPromise().then(function (res) { return res.json(); }).catch(this.restHelper.handleError);\r\n\t    };\r\n\t    ReviewService.prototype.addReview = function (review) {\r\n\t        var headers = new http_1.Headers({\r\n\t            'content-type': 'application/json'\r\n\t        });\r\n\t        return this.http.post(this.restHelper.url + \"Reviews\", review, {\r\n\t            headers: headers\r\n\t        }).toPromise().then(function (res) { return res.json(); }).catch(this.restHelper.handleError);\r\n\t    };\r\n\t    ReviewService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, (typeof (_b = typeof rest_helper_service_1.RestHelperService !== 'undefined' && rest_helper_service_1.RestHelperService) === 'function' && _b) || Object])\r\n\t    ], ReviewService);\r\n\t    return ReviewService;\r\n\t    var _a, _b;\r\n\t}());\r\n\texports.ReviewService = ReviewService;\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\tvar toPromise_1 = __webpack_require__(32);\n\tObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n\t//# sourceMappingURL=toPromise.js.map\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(6);\n\t/* tslint:disable:max-line-length */\n\t/**\n\t * @param PromiseCtor\n\t * @return {Promise<T>}\n\t * @method toPromise\n\t * @owner Observable\n\t */\n\tfunction toPromise(PromiseCtor) {\n\t    var _this = this;\n\t    if (!PromiseCtor) {\n\t        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t            PromiseCtor = root_1.root.Rx.config.Promise;\n\t        }\n\t        else if (root_1.root.Promise) {\n\t            PromiseCtor = root_1.root.Promise;\n\t        }\n\t    }\n\t    if (!PromiseCtor) {\n\t        throw new Error('no Promise impl found');\n\t    }\n\t    return new PromiseCtor(function (resolve, reject) {\n\t        var value;\n\t        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n\t    });\n\t}\n\texports.toPromise = toPromise;\n\t//# sourceMappingURL=toPromise.js.map\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v2.4.0\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(3), __webpack_require__(32), __webpack_require__(4), __webpack_require__(5), __webpack_require__(34)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n\t}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     *  Base class for control directives.\n\t      * *\n\t      * Only used internally in the forms module.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var AbstractControlDirective = (function () {\n\t        function AbstractControlDirective() {\n\t        }\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('unimplemented'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.value : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.invalid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pending : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.errors : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pristine : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.dirty : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.touched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.untouched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.disabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.enabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.statusChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valueChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.reset = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            if (this.control)\n\t                this.control.reset(value);\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.hasError(errorCode, path) : false;\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.getError(errorCode, path) : null;\n\t        };\n\t        return AbstractControlDirective;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  A directive that contains multiple {@link NgControl}s.\n\t      * *\n\t      * Only used by the forms module.\n\t      * *\n\t     */\n\t    var ControlContainer = (function (_super) {\n\t        __extends$1(ControlContainer, _super);\n\t        function ControlContainer() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n\t            /**\n\t             *  Get the form to which this container belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ControlContainer.prototype, \"path\", {\n\t            /**\n\t             *  Get the path to this container.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ControlContainer;\n\t    }(AbstractControlDirective));\n\t\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPresent(obj) {\n\t        return obj != null;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isBlank(obj) {\n\t        return obj == null;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    /**\n\t     * @param {?} o\n\t     * @return {?}\n\t     */\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t\n\t    /**\n\t     *  Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var /** @type {?} */ m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var /** @type {?} */ k1 = Object.keys(m1);\n\t            var /** @type {?} */ k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t                var /** @type {?} */ key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} arr\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        ListWrapper.findLast = function (arr, condition) {\n\t            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n\t                if (condition(arr[i])) {\n\t                    return arr[i];\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} items\n\t         * @return {?}\n\t         */\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n\t                var /** @type {?} */ index = list.indexOf(items[i]);\n\t                if (index > -1) {\n\t                    list.splice(index, 1);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} el\n\t         * @return {?}\n\t         */\n\t        ListWrapper.remove = function (list, el) {\n\t            var /** @type {?} */ index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        /**\n\t         * @param {?} a\n\t         * @param {?} b\n\t         * @return {?}\n\t         */\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @return {?}\n\t         */\n\t        ListWrapper.flatten = function (list) {\n\t            return list.reduce(function (flat, item) {\n\t                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n\t                return ((flat)).concat(flatItem);\n\t            }, []);\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t\n\t    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\t\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function isEmptyInputValue(value) {\n\t        return value == null || typeof value === 'string' && value.length === 0;\n\t    }\n\t    /**\n\t     * Providers for validators to be used for {@link FormControl}s in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n\t    /**\n\t     * Providers for asynchronous validators to be used for {@link FormControl}s\n\t     * in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * See {@link NG_VALIDATORS} for more details.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n\t    /**\n\t     *  Provides a set of validators used by form controls.\n\t      * *\n\t      * A validator is a function that processes a {@link FormControl} or collection of\n\t      * controls and returns a map of errors. A null map means that validation has passed.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```typescript\n\t      * var loginControl = new FormControl(\"\", Validators.required)\n\t      * ```\n\t      * *\n\t     */\n\t    var Validators = (function () {\n\t        function Validators() {\n\t        }\n\t        /**\n\t         *  Validator that requires controls to have a non-empty value.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.required = function (control) {\n\t            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n\t        };\n\t        /**\n\t         *  Validator that requires control value to be true.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.requiredTrue = function (control) {\n\t            return control.value === true ? null : { 'required': true };\n\t        };\n\t        /**\n\t         *  Validator that requires controls to have a value of a minimum length.\n\t         * @param {?} minLength\n\t         * @return {?}\n\t         */\n\t        Validators.minLength = function (minLength) {\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length < minLength ?\n\t                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         *  Validator that requires controls to have a value of a maximum length.\n\t         * @param {?} maxLength\n\t         * @return {?}\n\t         */\n\t        Validators.maxLength = function (maxLength) {\n\t            return function (control) {\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length > maxLength ?\n\t                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         *  Validator that requires a control to match a regex to its value.\n\t         * @param {?} pattern\n\t         * @return {?}\n\t         */\n\t        Validators.pattern = function (pattern) {\n\t            if (!pattern)\n\t                return Validators.nullValidator;\n\t            var /** @type {?} */ regex;\n\t            var /** @type {?} */ regexStr;\n\t            if (typeof pattern === 'string') {\n\t                regexStr = \"^\" + pattern + \"$\";\n\t                regex = new RegExp(regexStr);\n\t            }\n\t            else {\n\t                regexStr = pattern.toString();\n\t                regex = pattern;\n\t            }\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ value = control.value;\n\t                return regex.test(value) ? null :\n\t                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n\t            };\n\t        };\n\t        /**\n\t         *  No-op validator.\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        Validators.nullValidator = function (c) { return null; };\n\t        /**\n\t         *  Compose multiple validators into a single function that returns the union\n\t          * of the individual error maps.\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.compose = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                return _mergeErrors(_executeValidators(control, presentValidators));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.composeAsync = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n\t                return Promise.all(promises).then(_mergeErrors);\n\t            };\n\t        };\n\t        return Validators;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function _convertToPromise(obj) {\n\t        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeAsyncValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} arrayOfErrors\n\t     * @return {?}\n\t     */\n\t    function _mergeErrors(arrayOfErrors) {\n\t        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n\t            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n\t        }, {});\n\t        return Object.keys(res).length === 0 ? null : res;\n\t    }\n\t\n\t    /**\n\t     * Used to provide a {@link ControlValueAccessor} for form controls.\n\t     *\n\t     * See {@link DefaultValueAccessor} for how to implement one.\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\t\n\t    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n\t        multi: true,\n\t    };\n\t    /**\n\t     *  The accessor for writing a value and listening to changes on a checkbox input element.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n\t      * ```\n\t      * *\n\t      * @stable\n\t     */\n\t    var CheckboxControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        CheckboxControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n\t                        providers: [CHECKBOX_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return CheckboxControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The default accessor for writing a value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"text\" name=\"searchQuery\" ngModel>\n\t      * ```\n\t      * *\n\t      * @stable\n\t     */\n\t    var DefaultValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function DefaultValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.writeValue = function (value) {\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        DefaultValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n\t                        // TODO: vsavkin replace the above selector with the one below it once\n\t                        // https://github.com/angular/angular/issues/3011 is implemented\n\t                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n\t                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [DEFAULT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        DefaultValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return DefaultValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeAsyncValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t\n\t    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The accessor for writing a number value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"number\" [(ngModel)]=\"age\">\n\t      * ```\n\t     */\n\t    var NumberValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function NumberValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.writeValue = function (value) {\n\t            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        NumberValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [NUMBER_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NumberValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return NumberValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function unimplemented() {\n\t        throw new Error('unimplemented');\n\t    }\n\t    /**\n\t     *  A base class that all control directive extend.\n\t      * It binds a {@link FormControl} object to a DOM element.\n\t      * *\n\t      * Used internally by Angular forms.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var NgControl = (function (_super) {\n\t        __extends$2(NgControl, _super);\n\t        function NgControl() {\n\t            _super.apply(this, arguments);\n\t            /** @internal */\n\t            this._parent = null;\n\t            this.name = null;\n\t            this.valueAccessor = null;\n\t            /** @internal */\n\t            this._rawValidators = [];\n\t            /** @internal */\n\t            this._rawAsyncValidators = [];\n\t        }\n\t        Object.defineProperty(NgControl.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @abstract\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n\t        return NgControl;\n\t    }(AbstractControlDirective));\n\t\n\t    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  Internal class used by Angular to uncheck radio buttons with the matching name.\n\t     */\n\t    var RadioControlRegistry = (function () {\n\t        function RadioControlRegistry() {\n\t            this._accessors = [];\n\t        }\n\t        /**\n\t         * @param {?} control\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.add = function (control, accessor) {\n\t            this._accessors.push([control, accessor]);\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.remove = function (accessor) {\n\t            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n\t                if (this._accessors[i][1] === accessor) {\n\t                    this._accessors.splice(i, 1);\n\t                    return;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.select = function (accessor) {\n\t            var _this = this;\n\t            this._accessors.forEach(function (c) {\n\t                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n\t                    c[1].fireUncheck(accessor.value);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} controlPair\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n\t            if (!controlPair[0].control)\n\t                return false;\n\t            return controlPair[0]._parent === accessor._control._parent &&\n\t                controlPair[1].name === accessor.name;\n\t        };\n\t        RadioControlRegistry.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlRegistry.ctorParameters = function () { return []; };\n\t        return RadioControlRegistry;\n\t    }());\n\t    /**\n\t     *  *\n\t      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n\t      * to keep the view synced with the {@link FormControl} model.\n\t      * *\n\t      * *\n\t      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n\t      * value accessor will be active on any radio control that has a form directive. You do\n\t      * **not** need to add a special selector to activate it.\n\t      * *\n\t      * ### How to use radio buttons with form directives\n\t      * *\n\t      * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n\t      * in the same group have the same `name` attribute.  Radio buttons with different `name`\n\t      * attributes do not affect each other.\n\t      * *\n\t      * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n\t      * *\n\t      * When using radio buttons in a reactive form, radio buttons in the same group should have the\n\t      * same `formControlName`. You can also add a `name` attribute, but it's optional.\n\t      * *\n\t      * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * @stable\n\t     */\n\t    var RadioControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         * @param {?} _registry\n\t         * @param {?} _injector\n\t         */\n\t        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this._registry = _registry;\n\t            this._injector = _injector;\n\t            this.onChange = function () { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnInit = function () {\n\t            this._control = this._injector.get(NgControl);\n\t            this._checkName();\n\t            this._registry.add(this._control, this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._state = value === this.value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this._fn = fn;\n\t            this.onChange = function () {\n\t                fn(_this.value);\n\t                _this._registry.select(_this);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._checkName = function () {\n\t            if (this.name && this.formControlName && this.name !== this.formControlName) {\n\t                this._throwNameError();\n\t            }\n\t            if (!this.name && this.formControlName)\n\t                this.name = this.formControlName;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._throwNameError = function () {\n\t            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n\t        };\n\t        RadioControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n\t                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n\t                        providers: [RADIO_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: RadioControlRegistry, },\n\t            { type: _angular_core.Injector, },\n\t        ]; };\n\t        RadioControlValueAccessor.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'formControlName': [{ type: _angular_core.Input },],\n\t            'value': [{ type: _angular_core.Input },],\n\t        };\n\t        return RadioControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The accessor for writing a range value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"range\" [(ngModel)]=\"age\" >\n\t      * ```\n\t     */\n\t    var RangeValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function RangeValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        RangeValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [RANGE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RangeValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return RangeValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     *  *\n\t      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n\t      * to keep the view synced with the {@link FormControl} model.\n\t      * *\n\t      * *\n\t      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n\t      * value accessor will be active on any select control that has a form directive. You do\n\t      * **not** need to add a special selector to activate it.\n\t      * *\n\t      * ### How to use select controls with form directives\n\t      * *\n\t      * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n\t      * attribute to the main `<select>` tag.\n\t      * *\n\t      * If your option values are simple strings, you can bind to the normal `value` property\n\t      * on the option.  If your option values happen to be objects (and you'd like to save the\n\t      * selection in your form as an object), use `ngValue` instead:\n\t      * *\n\t      * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n\t      * *\n\t      * In reactive forms, you'll also want to add your form directive (`formControlName` or\n\t      * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n\t      * choice of binding to the  `value` or `ngValue` property on the select's options.\n\t      * *\n\t      * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n\t      * *\n\t      * Note: We listen to the 'change' event because 'input' events aren't fired\n\t      * for selects in Firefox and IE:\n\t      * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n\t      * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var SelectControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (valueString) {\n\t                _this.value = valueString;\n\t                fn(_this._getOptionValue(valueString));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id), value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n\t        };\n\t        SelectControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectControlValueAccessor;\n\t    }());\n\t    /**\n\t     *  *\n\t      * *\n\t      * See docs for {@link SelectControlValueAccessor} for usage examples.\n\t      * *\n\t     */\n\t    var NgSelectOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select)\n\t                this.id = this._select._registerOption();\n\t        }\n\t        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._select._optionMap.set(this.id, value);\n\t                this._setElementValue(_buildValueString(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._setElementValue(value);\n\t                if (this._select)\n\t                    this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectOption;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString$1(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (typeof value === 'string')\n\t            value = \"'\" + value + \"'\";\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId$1(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     *  The accessor for writing a value and listening to changes on a select element.\n\t      * *\n\t     */\n\t    var SelectMultipleControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n\t            var _this = this;\n\t            this.value = value;\n\t            var /** @type {?} */ optionSelectedStateSetter;\n\t            if (Array.isArray(value)) {\n\t                // convert values to ids\n\t                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n\t            }\n\t            else {\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n\t            }\n\t            this._optionMap.forEach(optionSelectedStateSetter);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (_) {\n\t                var /** @type {?} */ selected = [];\n\t                if (_.hasOwnProperty('selectedOptions')) {\n\t                    var /** @type {?} */ options = _.selectedOptions;\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                        selected.push(val);\n\t                    }\n\t                }\n\t                else {\n\t                    var /** @type {?} */ options = (_.options);\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        if (opt.selected) {\n\t                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                            selected.push(val);\n\t                        }\n\t                    }\n\t                }\n\t                _this.value = selected;\n\t                fn(selected);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n\t            var /** @type {?} */ id = (this._idCounter++).toString();\n\t            this._optionMap.set(id, value);\n\t            return id;\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id)._value, value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId$1(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n\t        };\n\t        SelectMultipleControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectMultipleControlValueAccessor;\n\t    }());\n\t    /**\n\t     *  Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <select multiple name=\"city\" ngModel>\n\t      * <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t      * </select>\n\t      * ```\n\t     */\n\t    var NgSelectMultipleOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectMultipleOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select) {\n\t                this.id = this._select._registerOption(this);\n\t            }\n\t        }\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._value = value;\n\t                this._setElementValue(_buildValueString$1(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select) {\n\t                    this._value = value;\n\t                    this._setElementValue(_buildValueString$1(this.id, value));\n\t                    this._select.writeValue(this._select.value);\n\t                }\n\t                else {\n\t                    this._setElementValue(value);\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * @param {?} selected\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectMultipleOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectMultipleOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectMultipleOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectMultipleOption;\n\t    }());\n\t\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function controlPath(name, parent) {\n\t        return parent.path.concat([name]);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpControl(control, dir) {\n\t        if (!control)\n\t            _throwError(dir, 'Cannot find control with');\n\t        if (!dir.valueAccessor)\n\t            _throwError(dir, 'No value accessor for form control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t        dir.valueAccessor.writeValue(control.value);\n\t        // view -> model\n\t        dir.valueAccessor.registerOnChange(function (newValue) {\n\t            dir.viewToModelUpdate(newValue);\n\t            control.markAsDirty();\n\t            control.setValue(newValue, { emitModelToViewChange: false });\n\t        });\n\t        // touched\n\t        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n\t        control.registerOnChange(function (newValue, emitModelEvent) {\n\t            // control -> view\n\t            dir.valueAccessor.writeValue(newValue);\n\t            // control -> ngModel\n\t            if (emitModelEvent)\n\t                dir.viewToModelUpdate(newValue);\n\t        });\n\t        if (dir.valueAccessor.setDisabledState) {\n\t            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n\t        }\n\t        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function cleanUpControl(control, dir) {\n\t        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n\t        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        if (control)\n\t            control._clearChangeFns();\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpFormContainer(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function _noControlError(dir) {\n\t        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} message\n\t     * @return {?}\n\t     */\n\t    function _throwError(dir, message) {\n\t        var /** @type {?} */ messageEnd;\n\t        if (dir.path.length > 1) {\n\t            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n\t        }\n\t        else if (dir.path[0]) {\n\t            messageEnd = \"name: '\" + dir.path + \"'\";\n\t        }\n\t        else {\n\t            messageEnd = 'unspecified name attribute';\n\t        }\n\t        throw new Error(message + \" \" + messageEnd);\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeValidators(validators) {\n\t        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeAsyncValidators(validators) {\n\t        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n\t            null;\n\t    }\n\t    /**\n\t     * @param {?} changes\n\t     * @param {?} viewModel\n\t     * @return {?}\n\t     */\n\t    function isPropertyUpdated(changes, viewModel) {\n\t        if (!changes.hasOwnProperty('model'))\n\t            return false;\n\t        var /** @type {?} */ change = changes['model'];\n\t        if (change.isFirstChange())\n\t            return true;\n\t        return !looseIdentical(viewModel, change.currentValue);\n\t    }\n\t    var /** @type {?} */ BUILTIN_ACCESSORS = [\n\t        CheckboxControlValueAccessor,\n\t        RangeValueAccessor,\n\t        NumberValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t    ];\n\t    /**\n\t     * @param {?} valueAccessor\n\t     * @return {?}\n\t     */\n\t    function isBuiltInAccessor(valueAccessor) {\n\t        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} valueAccessors\n\t     * @return {?}\n\t     */\n\t    function selectValueAccessor(dir, valueAccessors) {\n\t        if (!valueAccessors)\n\t            return null;\n\t        var /** @type {?} */ defaultAccessor;\n\t        var /** @type {?} */ builtinAccessor;\n\t        var /** @type {?} */ customAccessor;\n\t        valueAccessors.forEach(function (v) {\n\t            if (v.constructor === DefaultValueAccessor) {\n\t                defaultAccessor = v;\n\t            }\n\t            else if (isBuiltInAccessor(v)) {\n\t                if (builtinAccessor)\n\t                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n\t                builtinAccessor = v;\n\t            }\n\t            else {\n\t                if (customAccessor)\n\t                    _throwError(dir, 'More than one custom value accessor matches form control with');\n\t                customAccessor = v;\n\t            }\n\t        });\n\t        if (customAccessor)\n\t            return customAccessor;\n\t        if (builtinAccessor)\n\t            return builtinAccessor;\n\t        if (defaultAccessor)\n\t            return defaultAccessor;\n\t        _throwError(dir, 'No valid value accessor for form control with');\n\t        return null;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n\t      * *\n\t     */\n\t    var AbstractFormGroupDirective = (function (_super) {\n\t        __extends(AbstractFormGroupDirective, _super);\n\t        function AbstractFormGroupDirective() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormGroup(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormGroup(this);\n\t            }\n\t        };\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             *  Get the {@link FormGroup} backing this binding.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormGroup(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             *  Get the path to this control group.\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             *  Get the {@link Form} to which this group belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n\t        return AbstractFormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var AbstractControlStatus = (function () {\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function AbstractControlStatus(cd) {\n\t            this._cd = cd;\n\t        }\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AbstractControlStatus;\n\t    }());\n\t    var /** @type {?} */ ngControlStatusHost = {\n\t        '[class.ng-untouched]': 'ngClassUntouched',\n\t        '[class.ng-touched]': 'ngClassTouched',\n\t        '[class.ng-pristine]': 'ngClassPristine',\n\t        '[class.ng-dirty]': 'ngClassDirty',\n\t        '[class.ng-valid]': 'ngClassValid',\n\t        '[class.ng-invalid]': 'ngClassInvalid',\n\t        '[class.ng-pending]': 'ngClassPending',\n\t    };\n\t    /**\n\t     *  Directive automatically applied to Angular form controls that sets CSS classes\n\t      * based on control status (valid/invalid/dirty/etc).\n\t      * *\n\t     */\n\t    var NgControlStatus = (function (_super) {\n\t        __extends$3(NgControlStatus, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatus(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatus.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatus.ctorParameters = function () { return [\n\t            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatus;\n\t    }(AbstractControlStatus));\n\t    /**\n\t     *  Directive automatically applied to Angular form groups that sets CSS classes\n\t      * based on control status (valid/invalid/dirty/etc).\n\t      * *\n\t     */\n\t    var NgControlStatusGroup = (function (_super) {\n\t        __extends$3(NgControlStatusGroup, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatusGroup(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatusGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n\t                        host: ngControlStatusHost\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatusGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatusGroup;\n\t    }(AbstractControlStatus));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  Use by directives and components to emit custom Events.\n\t      * *\n\t      * ### Examples\n\t      * *\n\t      * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t      * title gets clicked:\n\t      * *\n\t      * ```\n\t      * selector: 'zippy',\n\t      * template: `\n\t      * <div class=\"zippy\">\n\t      * <div (click)=\"toggle()\">Toggle</div>\n\t      * <div [hidden]=\"!visible\">\n\t      * <ng-content></ng-content>\n\t      * </div>\n\t      * </div>`})\n\t      * export class Zippy {\n\t      * visible: boolean = true;\n\t      * @Output() open: EventEmitter<any> = new EventEmitter();\n\t      * @Output() close: EventEmitter<any> = new EventEmitter();\n\t      * *\n\t      * toggle() {\n\t      * this.visible = !this.visible;\n\t      * if (this.visible) {\n\t      * this.open.emit(null);\n\t      * } else {\n\t      * this.close.emit(null);\n\t      * }\n\t      * }\n\t      * }\n\t      * ```\n\t      * *\n\t      * The events payload can be accessed by the parameter `$event` on the components output event\n\t      * handler:\n\t      * *\n\t      * ```\n\t      * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t      * ```\n\t      * *\n\t      * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t      * https://github.com/jhusain/observable-spec\n\t      * *\n\t      * Once a reference implementation of the spec is available, switch to it.\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$5(EventEmitter, _super);\n\t        /**\n\t         *  Creates an instance of [EventEmitter], which depending on [isAsync],\n\t          * delivers events synchronously or asynchronously.\n\t         * @param {?=} isAsync\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        /**\n\t         * @param {?=} generatorOrNext\n\t         * @param {?=} error\n\t         * @param {?=} complete\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var /** @type {?} */ schedulerFn;\n\t            var /** @type {?} */ errorFn = function (err) { return null; };\n\t            var /** @type {?} */ completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                    function (value) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n\t     */\n\t    var /** @type {?} */ VALID = 'VALID';\n\t    /**\n\t     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n\t     */\n\t    var /** @type {?} */ INVALID = 'INVALID';\n\t    /**\n\t     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n\t     * errors are not yet available for the input value.\n\t     */\n\t    var /** @type {?} */ PENDING = 'PENDING';\n\t    /**\n\t     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n\t     * calculations of validity or value.\n\t     */\n\t    var /** @type {?} */ DISABLED = 'DISABLED';\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} path\n\t     * @param {?} delimiter\n\t     * @return {?}\n\t     */\n\t    function _find(control, path, delimiter) {\n\t        if (path == null)\n\t            return null;\n\t        if (!(path instanceof Array)) {\n\t            path = ((path)).split(delimiter);\n\t        }\n\t        if (path instanceof Array && (path.length === 0))\n\t            return null;\n\t        return ((path)).reduce(function (v, name) {\n\t            if (v instanceof FormGroup) {\n\t                return v.controls[name] || null;\n\t            }\n\t            if (v instanceof FormArray) {\n\t                return v.at(/** @type {?} */ (name)) || null;\n\t            }\n\t            return null;\n\t        }, control);\n\t    }\n\t    /**\n\t     * @param {?} r\n\t     * @return {?}\n\t     */\n\t    function toObservable(r) {\n\t        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function coerceToValidator(validator) {\n\t        return Array.isArray(validator) ? composeValidators(validator) : validator;\n\t    }\n\t    /**\n\t     * @param {?} asyncValidator\n\t     * @return {?}\n\t     */\n\t    function coerceToAsyncValidator(asyncValidator) {\n\t        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n\t    }\n\t    /**\n\t     *  {@link FormArray}.\n\t      * *\n\t      * It provides some of the shared behavior that all controls and groups of controls have, like\n\t      * running validators, calculating status, and resetting state. It also defines the properties\n\t      * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n\t      * instantiated directly.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var AbstractControl = (function () {\n\t        /**\n\t         * @param {?} validator\n\t         * @param {?} asyncValidator\n\t         */\n\t        function AbstractControl(validator, asyncValidator) {\n\t            this.validator = validator;\n\t            this.asyncValidator = asyncValidator;\n\t            /** @internal */\n\t            this._onCollectionChange = function () { };\n\t            this._pristine = true;\n\t            this._touched = false;\n\t            /** @internal */\n\t            this._onDisabledChange = [];\n\t        }\n\t        Object.defineProperty(AbstractControl.prototype, \"value\", {\n\t            /**\n\t             *  The value of the control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n\t            /**\n\t             *  The parent control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"status\", {\n\t            /**\n\t             *  The validation status of the control. There are four possible\n\t              * validation statuses:\n\t              * *\n\t              * * **VALID**:  control has passed all validation checks\n\t              * * **INVALID**: control has failed at least one validation check\n\t              * * **PENDING**: control is in the midst of conducting a validation check\n\t              * * **DISABLED**: control is exempt from validation checks\n\t              * *\n\t              * These statuses are mutually exclusive, so a control cannot be\n\t              * both valid AND invalid or invalid AND disabled.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n\t            /**\n\t             *  A control is `valid` when its `status === VALID`.\n\t              * *\n\t              * In order to have this status, the control must have passed all its\n\t              * validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === VALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n\t            /**\n\t             *  A control is `invalid` when its `status === INVALID`.\n\t              * *\n\t              * In order to have this status, the control must have failed\n\t              * at least one of its validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === INVALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n\t            /**\n\t             *  A control is `pending` when its `status === PENDING`.\n\t              * *\n\t              * In order to have this status, the control must be in the\n\t              * middle of conducting a validation check.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status == PENDING; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n\t            /**\n\t             *  A control is `disabled` when its `status === DISABLED`.\n\t              * *\n\t              * Disabled controls are exempt from validation checks and\n\t              * are not included in the aggregate value of their ancestor\n\t              * controls.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n\t            /**\n\t             *  A control is `enabled` as long as its `status !== DISABLED`.\n\t              * *\n\t              * In other words, it has a status of `VALID`, `INVALID`, or\n\t              * `PENDING`.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status !== DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n\t            /**\n\t             *  Returns any errors generated by failing validation. If there\n\t              * are no errors, it will return null.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._errors; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n\t            /**\n\t             *  A control is `pristine` if the user has not yet changed\n\t              * the value in the UI.\n\t              * *\n\t              * Note that programmatic changes to a control's value will\n\t              * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n\t            /**\n\t             *  A control is `dirty` if the user has changed the value\n\t              * in the UI.\n\t              * *\n\t              * Note that programmatic changes to a control's value will\n\t              * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this.pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n\t            /**\n\t             *  A control is marked `touched` once the user has triggered\n\t              * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n\t            /**\n\t             *  A control is `untouched` if the user has not yet triggered\n\t              * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n\t            /**\n\t             *  Emits an event every time the value of the control changes, in\n\t              * the UI or programmatically.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._valueChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n\t            /**\n\t             *  Emits an event every time the validation status of the control\n\t              * is re-calculated.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._statusChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the synchronous validators that are active on this control.  Calling\n\t          * this will overwrite any existing sync validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValidators = function (newValidator) {\n\t            this.validator = coerceToValidator(newValidator);\n\t        };\n\t        /**\n\t         *  Sets the async validators that are active on this control. Calling this\n\t          * will overwrite any existing async validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n\t            this.asyncValidator = coerceToAsyncValidator(newValidator);\n\t        };\n\t        /**\n\t         *  Empties out the sync validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n\t        /**\n\t         *  Empties out the async validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n\t        /**\n\t         *  Marks the control as `touched`.\n\t          * *\n\t          * This will also mark all direct ancestors as `touched` to maintain\n\t          * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = true;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `untouched`.\n\t          * *\n\t          * If the control has any children, it will also mark all children as `untouched`\n\t          * to maintain the model, and re-calculate the `touched` status of all parent\n\t          * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsUntouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = false;\n\t            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `dirty`.\n\t          * *\n\t          * This will also mark all direct ancestors as `dirty` to maintain\n\t          * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsDirty = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = false;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsDirty({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `pristine`.\n\t          * *\n\t          * If the control has any children, it will also mark all children as `pristine`\n\t          * to maintain the model, and re-calculate the `pristine` status of all parent\n\t          * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = true;\n\t            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `pending`.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPending = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._status = PENDING;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsPending({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Disables the control. This means the control will be exempt from validation checks and\n\t          * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n\t          * *\n\t          * If the control has children, all children will be disabled to maintain the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.disable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = DISABLED;\n\t            this._errors = null;\n\t            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n\t            this._updateValue();\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n\t        };\n\t        /**\n\t         *  Enables the control. This means the control will be included in validation checks and\n\t          * the aggregate value of its parent. Its status is re-calculated based on its value and\n\t          * its validators.\n\t          * *\n\t          * If the control has children, all children will be enabled.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.enable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = VALID;\n\t            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n\t        };\n\t        /**\n\t         * @param {?} onlySelf\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity();\n\t                this._parent._updatePristine();\n\t                this._parent._updateTouched();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} parent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n\t        /**\n\t         *  Sets the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValue = function (value, options) { };\n\t        /**\n\t         *  Patches the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.patchValue = function (value, options) { };\n\t        /**\n\t         *  Resets the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?=} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.reset = function (value, options) { };\n\t        /**\n\t         *  Re-calculates the value and validation status of the control.\n\t          * *\n\t          * By default, it will also update the value and validity of its ancestors.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._setInitialStatus();\n\t            this._updateValue();\n\t            if (this.enabled) {\n\t                this._errors = this._runValidator();\n\t                this._status = this._calculateStatus();\n\t                if (this._status === VALID || this._status === PENDING) {\n\t                    this._runAsyncValidator(emitEvent);\n\t                }\n\t            }\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTreeValidity = function (_a) {\n\t            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n\t            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runValidator = function () {\n\t            return this.validator ? this.validator(this) : null;\n\t        };\n\t        /**\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n\t            var _this = this;\n\t            if (this.asyncValidator) {\n\t                this._status = PENDING;\n\t                this._cancelExistingSubscription();\n\t                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n\t                this._asyncValidationSubscription =\n\t                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._cancelExistingSubscription = function () {\n\t            if (this._asyncValidationSubscription) {\n\t                this._asyncValidationSubscription.unsubscribe();\n\t            }\n\t        };\n\t        /**\n\t         *  Sets errors on a form control.\n\t          * *\n\t          * This is used when validations are run manually by the user, rather than automatically.\n\t          * *\n\t          * Calling `setErrors` will also update the validity of the parent control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const login = new FormControl(\"someLogin\");\n\t          * login.setErrors({\n\t          * \"notUnique\": true\n\t          * });\n\t          * *\n\t          * expect(login.valid).toEqual(false);\n\t          * expect(login.errors).toEqual({\"notUnique\": true});\n\t          * *\n\t          * login.setValue(\"someOtherLogin\");\n\t          * *\n\t          * expect(login.valid).toEqual(true);\n\t          * ```\n\t         * @param {?} errors\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setErrors = function (errors, _a) {\n\t            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n\t            this._errors = errors;\n\t            this._updateControlsErrors(emitEvent !== false);\n\t        };\n\t        /**\n\t         *  Retrieves a child control given the control's name or path.\n\t          * *\n\t          * Paths can be passed in as an array or a string delimited by a dot.\n\t          * *\n\t          * To get a control nested within a `person` sub-group:\n\t          * *\n\t          * * `this.form.get('person.name');`\n\t          * *\n\t          * -OR-\n\t          * *\n\t          * * `this.form.get(['person', 'name']);`\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n\t        /**\n\t         *  Returns true if the control with the given path has the error specified. Otherwise\n\t          * returns null or undefined.\n\t          * *\n\t          * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            var /** @type {?} */ control = path ? this.get(path) : this;\n\t            return control && control._errors ? control._errors[errorCode] : null;\n\t        };\n\t        /**\n\t         *  Returns true if the control with the given path has the error specified. Otherwise\n\t          * returns false.\n\t          * *\n\t          * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return !!this.getError(errorCode, path);\n\t        };\n\t        Object.defineProperty(AbstractControl.prototype, \"root\", {\n\t            /**\n\t             *  Retrieves the top-level ancestor of this control.\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ x = this;\n\t                while (x._parent) {\n\t                    x = x._parent;\n\t                }\n\t                return x;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n\t            this._status = this._calculateStatus();\n\t            if (emitEvent) {\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent) {\n\t                this._parent._updateControlsErrors(emitEvent);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._initObservables = function () {\n\t            this._valueChanges = new EventEmitter();\n\t            this._statusChanges = new EventEmitter();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._calculateStatus = function () {\n\t            if (this._allControlsDisabled())\n\t                return DISABLED;\n\t            if (this._errors)\n\t                return INVALID;\n\t            if (this._anyControlsHaveStatus(PENDING))\n\t                return PENDING;\n\t            if (this._anyControlsHaveStatus(INVALID))\n\t                return INVALID;\n\t            return VALID;\n\t        };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControls = function (condition) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._allControlsDisabled = function () { };\n\t        /**\n\t         * @param {?} status\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n\t            return this._anyControls(function (control) { return control.status === status; });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsDirty = function () {\n\t            return this._anyControls(function (control) { return control.dirty; });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsTouched = function () {\n\t            return this._anyControls(function (control) { return control.touched; });\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updatePristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = !this._anyControlsDirty();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = this._anyControlsTouched();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._isBoxedValue = function (formState) {\n\t            return typeof formState === 'object' && formState !== null &&\n\t                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n\t        return AbstractControl;\n\t    }());\n\t    /**\n\t     *  *\n\t      * It is one of the three fundamental building blocks of Angular forms, along with\n\t      * {@link FormGroup} and {@link FormArray}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormControl}, you can pass in an initial value as the\n\t      * first argument. Example:\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl('some value');\n\t      * console.log(ctrl.value);     // 'some value'\n\t      * *```\n\t      * *\n\t      * You can also initialize the control with a form state object on instantiation,\n\t      * which includes both the value and whether or not the control is disabled.\n\t      * You can't use the value key without the disabled key; both are required\n\t      * to use this way of initialization.\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl({value: 'n/a', disabled: true});\n\t      * console.log(ctrl.value);     // 'n/a'\n\t      * console.log(ctrl.status);   // 'DISABLED'\n\t      * ```\n\t      * *\n\t      * To include a sync validator (or an array of sync validators) with the control,\n\t      * pass it in as the second argument. Async validators are also supported, but\n\t      * have to be passed in separately as the third arg.\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl('', Validators.required);\n\t      * console.log(ctrl.value);     // ''\n\t      * console.log(ctrl.status);   // 'INVALID'\n\t      * ```\n\t      * *\n\t      * See its superclass, {@link AbstractControl}, for more properties and methods.\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormControl = (function (_super) {\n\t        __extends$6(FormControl, _super);\n\t        /**\n\t         * @param {?=} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormControl(formState, validator, asyncValidator) {\n\t            if (formState === void 0) { formState = null; }\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n\t            /** @internal */\n\t            this._onChange = [];\n\t            this._applyFormState(formState);\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t            this._initObservables();\n\t        }\n\t        /**\n\t         *  Set the value of the form control to `value`.\n\t          * *\n\t          * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n\t          * and not its parent component. This defaults to false.\n\t          * *\n\t          * If `emitEvent` is `true`, this\n\t          * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n\t          * to true (as it falls through to `updateValueAndValidity`).\n\t          * *\n\t          * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n\t          * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n\t          * specified.\n\t          * *\n\t          * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n\t          * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n\t            this._value = value;\n\t            if (this._onChange.length && emitModelToViewChange !== false) {\n\t                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n\t            }\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of a control.\n\t          * *\n\t          * This function is functionally the same as {@link FormControl.setValue} at this level.\n\t          * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n\t          * where it does behave differently.\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.patchValue = function (value, options) {\n\t            if (options === void 0) { options = {}; }\n\t            this.setValue(value, options);\n\t        };\n\t        /**\n\t         *  Resets the form control. This means by default:\n\t          * *\n\t          * * it is marked as `pristine`\n\t          * * it is marked as `untouched`\n\t          * * value is set to null\n\t          * *\n\t          * You can also reset to a specific form state by passing through a standalone\n\t          * value or a form state object that contains both a value and a disabled state\n\t          * (these are the only two properties that cannot be calculated).\n\t          * *\n\t          * Ex:\n\t          * *\n\t          * ```ts\n\t          * this.control.reset('Nancy');\n\t          * *\n\t          * console.log(this.control.value);  // 'Nancy'\n\t          * ```\n\t          * *\n\t          * OR\n\t          * *\n\t          * ```\n\t          * this.control.reset({value: 'Nancy', disabled: true});\n\t          * *\n\t          * console.log(this.control.value);  // 'Nancy'\n\t          * console.log(this.control.status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} formState\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.reset = function (formState, _a) {\n\t            if (formState === void 0) { formState = null; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._applyFormState(formState);\n\t            this.markAsPristine({ onlySelf: onlySelf });\n\t            this.markAsUntouched({ onlySelf: onlySelf });\n\t            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._anyControls = function (condition) { return false; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n\t        /**\n\t         *  Register a listener for change events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._clearChangeFns = function () {\n\t            this._onChange = [];\n\t            this._onDisabledChange = [];\n\t            this._onCollectionChange = function () { };\n\t        };\n\t        /**\n\t         *  Register a listener for disabled events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnDisabledChange = function (fn) {\n\t            this._onDisabledChange.push(fn);\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._applyFormState = function (formState) {\n\t            if (this._isBoxedValue(formState)) {\n\t                this._value = formState.value;\n\t                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n\t                    this.enable({ onlySelf: true, emitEvent: false });\n\t            }\n\t            else {\n\t                this._value = formState;\n\t            }\n\t        };\n\t        return FormControl;\n\t    }(AbstractControl));\n\t    /**\n\t     *  instances.\n\t      * *\n\t      * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n\t      * with each control name as the key.  It calculates its status by reducing the statuses\n\t      * of its children. For example, if one of the controls in a group is invalid, the entire\n\t      * group becomes invalid.\n\t      * *\n\t      * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n\t      * along with {@link FormControl} and {@link FormArray}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n\t      * argument. The key for each child will be the name under which it is registered.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const form = new FormGroup({\n\t      * first: new FormControl('Nancy', Validators.minLength(2)),\n\t      * last: new FormControl('Drew'),\n\t      * });\n\t      * *\n\t      * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n\t      * console.log(form.status);  // 'VALID'\n\t      * ```\n\t      * *\n\t      * You can also include group-level validators as the second arg, or group-level async\n\t      * validators as the third arg. These come in handy when you want to perform validation\n\t      * that considers the value of more than one child control.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const form = new FormGroup({\n\t      * password: new FormControl('', Validators.minLength(2)),\n\t      * passwordConfirm: new FormControl('', Validators.minLength(2)),\n\t      * }, passwordMatchValidator);\n\t      * *\n\t      * *\n\t      * function passwordMatchValidator(g: FormGroup) {\n\t      * return g.get('password').value === g.get('passwordConfirm').value\n\t      * ? null : {'mismatch': true};\n\t      * }\n\t      * ```\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormGroup = (function (_super) {\n\t        __extends$6(FormGroup, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormGroup(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         *  Registers a control with the group's list of controls.\n\t          * *\n\t          * This method does not update value or validity of the control, so for\n\t          * most cases you'll want to use {@link FormGroup.addControl} instead.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.registerControl = function (name, control) {\n\t            if (this.controls[name])\n\t                return this.controls[name];\n\t            this.controls[name] = control;\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t            return control;\n\t        };\n\t        /**\n\t         *  Add a control to this group.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.addControl = function (name, control) {\n\t            this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Remove a control from this group.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.removeControl = function (name) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Replace an existing control.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setControl = function (name, control) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            if (control)\n\t                this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Check whether there is an enabled control with the given name in the group.\n\t          * *\n\t          * It will return false for disabled controls. If you'd like to check for\n\t          * existence in the group only, use {@link AbstractControl.get} instead.\n\t         * @param {?} controlName\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.contains = function (controlName) {\n\t            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n\t        };\n\t        /**\n\t         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n\t          * the structure of the group, with control names as keys.\n\t          * *\n\t          * This method performs strict checks, so it will throw an error if you try\n\t          * to set the value of a control that doesn't exist or if you exclude the\n\t          * value of a control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const form = new FormGroup({\n\t          * first: new FormControl(),\n\t          * last: new FormControl()\n\t          * });\n\t          * console.log(form.value);   // {first: null, last: null}\n\t          * *\n\t          * form.setValue({first: 'Nancy', last: 'Drew'});\n\t          * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n\t          * *\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            Object.keys(value).forEach(function (name) {\n\t                _this._throwIfControlMissing(name);\n\t                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n\t          * names as keys, and will do its best to match the values to the correct controls\n\t          * in the group.\n\t          * *\n\t          * It accepts both super-sets and sub-sets of the group without throwing an error.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const form = new FormGroup({\n\t          * first: new FormControl(),\n\t          * last: new FormControl()\n\t          * });\n\t          * console.log(form.value);   // {first: null, last: null}\n\t          * *\n\t          * form.patchValue({first: 'Nancy'});\n\t          * console.log(form.value);   // {first: 'Nancy', last: null}\n\t          * *\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            Object.keys(value).forEach(function (name) {\n\t                if (_this.controls[name]) {\n\t                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Resets the {@link FormGroup}. This means by default:\n\t          * *\n\t          * * The group and all descendants are marked `pristine`\n\t          * * The group and all descendants are marked `untouched`\n\t          * * The value of all descendants will be null or null maps\n\t          * *\n\t          * You can also reset to a specific form state by passing in a map of states\n\t          * that matches the structure of your form, with control names as keys. The state\n\t          * can be a standalone value or a form state object with both a value and a disabled\n\t          * status.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```ts\n\t          * this.form.reset({first: 'name', last: 'last name'});\n\t          * *\n\t          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t          * ```\n\t          * *\n\t          * - OR -\n\t          * *\n\t          * ```\n\t          * this.form.reset({\n\t          * first: {value: 'name', disabled: true},\n\t          * last: 'last'\n\t          * });\n\t          * *\n\t          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t          * console.log(this.form.get('first').status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = {}; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, name) {\n\t                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  The aggregate value of the {@link FormGroup}, including any disabled controls.\n\t          * *\n\t          * If you'd like to include all values regardless of disabled status, use this method.\n\t          * Otherwise, the `value` property is the best way to get the value of the group.\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.getRawValue = function () {\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                acc[name] = control.value;\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._throwIfControlMissing = function (name) {\n\t            if (!Object.keys(this.controls).length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.controls[name]) {\n\t                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._forEachChild = function (cb) {\n\t            var _this = this;\n\t            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) {\n\t                control.setParent(_this);\n\t                control._registerOnCollectionChange(_this._onCollectionChange);\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._anyControls = function (condition) {\n\t            var _this = this;\n\t            var /** @type {?} */ res = false;\n\t            this._forEachChild(function (control, name) {\n\t                res = res || (_this.contains(name) && condition(control));\n\t            });\n\t            return res;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceValue = function () {\n\t            var _this = this;\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                if (control.enabled || _this.disabled) {\n\t                    acc[name] = control.value;\n\t                }\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} initValue\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n\t            var /** @type {?} */ res = initValue;\n\t            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n\t            return res;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n\t                var controlName = _a[_i];\n\t                if (this.controls[controlName].enabled) {\n\t                    return false;\n\t                }\n\t            }\n\t            return Object.keys(this.controls).length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, name) {\n\t                if (value[name] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n\t                }\n\t            });\n\t        };\n\t        return FormGroup;\n\t    }(AbstractControl));\n\t    /**\n\t     *  instances.\n\t      * *\n\t      * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n\t      * It calculates its status by reducing the statuses of its children. For example, if one of\n\t      * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n\t      * *\n\t      * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n\t      * along with {@link FormControl} and {@link FormGroup}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n\t      * argument.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const arr = new FormArray([\n\t      * new FormControl('Nancy', Validators.minLength(2)),\n\t      * new FormControl('Drew'),\n\t      * ]);\n\t      * *\n\t      * console.log(arr.value);   // ['Nancy', 'Drew']\n\t      * console.log(arr.status);  // 'VALID'\n\t      * ```\n\t      * *\n\t      * You can also include array-level validators as the second arg, or array-level async\n\t      * validators as the third arg. These come in handy when you want to perform validation\n\t      * that considers the value of more than one child control.\n\t      * *\n\t      * ### Adding or removing controls\n\t      * *\n\t      * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n\t      * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n\t      * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n\t      * the `FormArray` directly, as that will result in strange and unexpected behavior such\n\t      * as broken change detection.\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormArray = (function (_super) {\n\t        __extends$6(FormArray, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormArray(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         *  Get the {@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.at = function (index) { return this.controls[index]; };\n\t        /**\n\t         *  Insert a new {@link AbstractControl} at the end of the array.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.push = function (control) {\n\t            this.controls.push(control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Insert a new {@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.insert = function (index, control) {\n\t            this.controls.splice(index, 0, control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Remove the control at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.removeAt = function (index) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Replace an existing control.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setControl = function (index, control) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            if (control) {\n\t                this.controls.splice(index, 0, control);\n\t                this._registerControl(control);\n\t            }\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        Object.defineProperty(FormArray.prototype, \"length\", {\n\t            /**\n\t             *  Length of the control array.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.controls.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n\t          * the structure of the control.\n\t          * *\n\t          * This method performs strict checks, so it will throw an error if you try\n\t          * to set the value of a control that doesn't exist or if you exclude the\n\t          * value of a control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const arr = new FormArray([\n\t          * new FormControl(),\n\t          * new FormControl()\n\t          * ]);\n\t          * console.log(arr.value);   // [null, null]\n\t          * *\n\t          * arr.setValue(['Nancy', 'Drew']);\n\t          * console.log(arr.value);   // ['Nancy', 'Drew']\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            value.forEach(function (newValue, index) {\n\t                _this._throwIfControlMissing(index);\n\t                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n\t          * structure of the control, and will do its best to match the values to the correct\n\t          * controls in the group.\n\t          * *\n\t          * It accepts both super-sets and sub-sets of the array without throwing an error.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const arr = new FormArray([\n\t          * new FormControl(),\n\t          * new FormControl()\n\t          * ]);\n\t          * console.log(arr.value);   // [null, null]\n\t          * *\n\t          * arr.patchValue(['Nancy']);\n\t          * console.log(arr.value);   // ['Nancy', null]\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            value.forEach(function (newValue, index) {\n\t                if (_this.at(index)) {\n\t                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Resets the {@link FormArray}. This means by default:\n\t          * *\n\t          * * The array and all descendants are marked `pristine`\n\t          * * The array and all descendants are marked `untouched`\n\t          * * The value of all descendants will be null or null maps\n\t          * *\n\t          * You can also reset to a specific form state by passing in an array of states\n\t          * that matches the structure of the control. The state can be a standalone value\n\t          * or a form state object with both a value and a disabled status.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```ts\n\t          * this.arr.reset(['name', 'last name']);\n\t          * *\n\t          * console.log(this.arr.value);  // ['name', 'last name']\n\t          * ```\n\t          * *\n\t          * - OR -\n\t          * *\n\t          * ```\n\t          * this.arr.reset([\n\t          * {value: 'name', disabled: true},\n\t          * 'last'\n\t          * ]);\n\t          * *\n\t          * console.log(this.arr.value);  // ['name', 'last name']\n\t          * console.log(this.arr.get(0).status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = []; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, index) {\n\t                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  The aggregate value of the array, including any disabled controls.\n\t          * *\n\t          * If you'd like to include all values regardless of disabled status, use this method.\n\t          * Otherwise, the `value` property is the best way to get the value of the array.\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._throwIfControlMissing = function (index) {\n\t            if (!this.controls.length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.at(index)) {\n\t                throw new Error(\"Cannot find form control at index \" + index);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._forEachChild = function (cb) {\n\t            this.controls.forEach(function (control, index) { cb(control, index); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._updateValue = function () {\n\t            var _this = this;\n\t            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n\t                .map(function (control) { return control.value; });\n\t        };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._anyControls = function (condition) {\n\t            return this.controls.some(function (control) { return control.enabled && condition(control); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) { return _this._registerControl(control); });\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, i) {\n\t                if (value[i] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n\t                var control = _a[_i];\n\t                if (control.enabled)\n\t                    return false;\n\t            }\n\t            return this.controls.length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._registerControl = function (control) {\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t        };\n\t        return FormArray;\n\t    }(AbstractControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n\t    };\n\t    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n\t    /**\n\t     *  to track aggregate form value and validation status.\n\t      * *\n\t      * *\n\t      * As soon as you import the `FormsModule`, this directive becomes active by default on\n\t      * all `<form>` tags.  You don't need to add a special selector.\n\t      * *\n\t      * You can export the directive into a local template variable using `ngForm` as the key\n\t      * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n\t      * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n\t      * will give you access to the aggregate value and validity status of the form, as well as\n\t      * user interaction properties like `dirty` and `touched`.\n\t      * *\n\t      * To register child controls with the form, you'll want to use {@link NgModel} with a\n\t      * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n\t      * sub-groups within the form.\n\t      * *\n\t      * You can listen to the directive's `ngSubmit` event to be notified when the user has\n\t      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t      * submission event.\n\t      * *\n\t      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `FormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var NgForm = (function (_super) {\n\t        __extends$4(NgForm, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgForm(validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._submitted = false;\n\t            this.ngSubmit = new EventEmitter();\n\t            this.form =\n\t                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n\t        }\n\t        Object.defineProperty(NgForm.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"controls\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form.controls; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                dir._control = (container.registerControl(dir.name, dir.control));\n\t                setUpControl(dir.control, dir);\n\t                dir.control.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                var /** @type {?} */ group = new FormGroup({});\n\t                setUpFormContainer(group, dir);\n\t                container.registerControl(dir.name, group);\n\t                group.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.updateModel = function (dir, value) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n\t                ctrl.setValue(value);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype._findContainer = function (path) {\n\t            path.pop();\n\t            return path.length ? (this.form.get(path)) : this.form;\n\t        };\n\t        NgForm.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n\t                        providers: [formDirectiveProvider],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        outputs: ['ngSubmit'],\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgForm.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        return NgForm;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ Examples = {\n\t        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n\t        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n\t        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n\t        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n\t        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n\t    };\n\t\n\t    var TemplateDrivenErrors = (function () {\n\t        function TemplateDrivenErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelParentException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.formGroupNameException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.missingNameException = function () {\n\t            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelGroupParentException = function () {\n\t            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        return TemplateDrivenErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ modelGroupProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive can only be used as a child of {@link NgForm} (or in other words,\n\t      * within `<form>` tags).\n\t      * *\n\t      * Use this directive if you'd like to create a sub-group within a form. This can\n\t      * come in handy if you want to validate a sub-group of your form separately from\n\t      * the rest of your form, or if some values in your domain model make more sense to\n\t      * consume together in a nested object.\n\t      * *\n\t      * Pass in the name you'd like this sub-group to have and it will become the key\n\t      * for the sub-group in the form's full value. You can also export the directive into\n\t      * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n\t      * *\n\t      * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `FormsModule`\n\t      * *\n\t     */\n\t    var NgModelGroup = (function (_super) {\n\t        __extends$8(NgModelGroup, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgModelGroup(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModelGroup.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelGroupParentException();\n\t            }\n\t        };\n\t        NgModelGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModelGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        NgModelGroup.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n\t        };\n\t        return NgModelGroup;\n\t    }(AbstractFormGroupDirective));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n\t    };\n\t    /**\n\t     * `ngModel` forces an additional change detection run when its inputs change:\n\t     * E.g.:\n\t     * ```\n\t     * <div>{{myModel.valid}}</div>\n\t     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n\t     * ```\n\t     * I.e. `ngModel` can export itself on the element and then be used in the template.\n\t     * Normally, this would result in expressions before the `input` that use the exported directive\n\t     * to have and old value as they have been\n\t     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n\t     * detection run.\n\t     *\n\t     * Notes:\n\t     * - this is just one extra run no matter how many `ngModel` have been changed.\n\t     * - this is a general problem when using `exportAs` for directives!\n\t     */\n\t    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n\t    /**\n\t     *  to a form control element.\n\t      * *\n\t      * The {@link FormControl} instance will track the value, user interaction, and\n\t      * validation status of the control and keep the view synced with the model. If used\n\t      * within a parent form, the directive will also register itself with the form as a child\n\t      * control.\n\t      * *\n\t      * *\n\t      * This directive can be used by itself or as part of a larger form. All you need is the\n\t      * `ngModel` selector to activate it.\n\t      * *\n\t      * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n\t      * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n\t      * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n\t      * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n\t      * the domain model in your class as well.\n\t      * *\n\t      * If you wish to inspect the properties of the associated {@link FormControl} (like\n\t      * validity state), you can also export the directive into a local template variable using\n\t      * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n\t      * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n\t      * will fall through to the control anyway, so you can access them directly. You can see a\n\t      * full list of properties directly available in {@link AbstractControlDirective}.\n\t      * *\n\t      * The following is an example of a simple standalone control using `ngModel`:\n\t      * *\n\t      * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n\t      * *\n\t      * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n\t      * so that the control can be registered with the parent form under that name.\n\t      * *\n\t      * It's worth noting that in the context of a parent form, you often can skip one-way or\n\t      * two-way binding because the parent form will sync the value for you. You can access\n\t      * its properties by exporting it into a local template variable using `ngForm` (ex:\n\t      * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n\t      * *\n\t      * If you do need to populate initial values into your form, using a one-way binding for\n\t      * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n\t      * than the domain model's value on submit.\n\t      * *\n\t      * Take a look at an example of using `ngModel` within a form:\n\t      * *\n\t      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t      * *\n\t      * To see `ngModel` examples with different form control types, see:\n\t      * *\n\t      * * Radio buttons: {@link RadioControlValueAccessor}\n\t      * * Selects: {@link SelectControlValueAccessor}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: `FormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var NgModel = (function (_super) {\n\t        __extends$7(NgModel, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            /** @internal */\n\t            this._control = new FormControl();\n\t            /** @internal */\n\t            this._registered = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnChanges = function (changes) {\n\t            this._checkForErrors();\n\t            if (!this._registered)\n\t                this._setUpControl();\n\t            if ('isDisabled' in changes) {\n\t                this._updateDisabled(changes);\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this._updateValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n\t        Object.defineProperty(NgModel.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpControl = function () {\n\t            this._isStandalone() ? this._setUpStandalone() :\n\t                this.formDirective.addControl(this);\n\t            this._registered = true;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._isStandalone = function () {\n\t            return !this._parent || (this.options && this.options.standalone);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpStandalone = function () {\n\t            setUpControl(this._control, this);\n\t            this._control.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkForErrors = function () {\n\t            if (!this._isStandalone()) {\n\t                this._checkParentType();\n\t            }\n\t            this._checkName();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                TemplateDrivenErrors.formGroupNameException();\n\t            }\n\t            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkName = function () {\n\t            if (this.options && this.options.name)\n\t                this.name = this.options.name;\n\t            if (!this._isStandalone() && !this.name) {\n\t                TemplateDrivenErrors.missingNameException();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateValue = function (value) {\n\t            var _this = this;\n\t            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateDisabled = function (changes) {\n\t            var _this = this;\n\t            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\t            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\t            resolvedPromise$1.then(function () {\n\t                if (isDisabled && !_this.control.disabled) {\n\t                    _this.control.disable();\n\t                }\n\t                else if (!isDisabled && _this.control.disabled) {\n\t                    _this.control.enable();\n\t                }\n\t            });\n\t        };\n\t        NgModel.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n\t                        providers: [formControlBinding],\n\t                        exportAs: 'ngModel'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModel.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        NgModel.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t        };\n\t        return NgModel;\n\t    }(NgControl));\n\t\n\t    var ReactiveErrors = (function () {\n\t        function ReactiveErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.controlParentException = function () {\n\t            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.ngModelGroupException = function () {\n\t            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.missingFormException = function () {\n\t            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.groupParentException = function () {\n\t            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.arrayParentException = function () {\n\t            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.disabledAttrWarning = function () {\n\t            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n\t        };\n\t        return ReactiveErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding$1 = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n\t    };\n\t    /**\n\t     *  *\n\t      * In other words, this directive ensures that any values written to the {@link FormControl}\n\t      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t      * any values written to the DOM element through user input will be reflected in the\n\t      * {@link FormControl} instance (view -> model).\n\t      * *\n\t      * *\n\t      * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n\t      * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n\t      * {@link FormControlDirective}.\n\t      * *\n\t      * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n\t      * it does not require that your {@link FormControl} instance be part of any parent\n\t      * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n\t      * exists above it.\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormControl} instance. See a full list of available properties in\n\t      * {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n\t      * or you can set it programmatically later using {@link AbstractControl.setValue} or\n\t      * {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormControlDirective = (function (_super) {\n\t        __extends$9(FormControlDirective, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this.update = new EventEmitter();\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.ngOnChanges = function (changes) {\n\t            if (this._isControlChanged(changes)) {\n\t                setUpControl(this.form, this);\n\t                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                    this.valueAccessor.setDisabledState(true);\n\t                }\n\t                this.form.updateValueAndValidity({ emitEvent: false });\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.form.setValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype._isControlChanged = function (changes) {\n\t            return changes.hasOwnProperty('form');\n\t        };\n\t        FormControlDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlDirective;\n\t    }(NgControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider$1 = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive accepts an existing {@link FormGroup} instance. It will then use this\n\t      * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n\t      * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n\t      * and {@link FormArrayName} directives.\n\t      * *\n\t      * **Set value**: You can set the form's initial value when instantiating the\n\t      * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n\t      * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n\t      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t      * submission event.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * In this example, we create form controls for first name and last name.\n\t      * *\n\t      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormGroupDirective = (function (_super) {\n\t        __extends$11(FormGroupDirective, _super);\n\t        /**\n\t         * @param {?} _validators\n\t         * @param {?} _asyncValidators\n\t         */\n\t        function FormGroupDirective(_validators, _asyncValidators) {\n\t            _super.call(this);\n\t            this._validators = _validators;\n\t            this._asyncValidators = _asyncValidators;\n\t            this._submitted = false;\n\t            this.directives = [];\n\t            this.form = null;\n\t            this.ngSubmit = new EventEmitter();\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n\t            this._checkFormPresent();\n\t            if (changes.hasOwnProperty('form')) {\n\t                this._updateValidators();\n\t                this._updateDomValue();\n\t                this._updateRegistrations();\n\t            }\n\t        };\n\t        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addControl = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpControl(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t            this.directives.push(dir);\n\t            return ctrl;\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormGroup = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormArray = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.updateModel = function (dir, value) {\n\t            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n\t            ctrl.setValue(value);\n\t        };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateDomValue = function () {\n\t            var _this = this;\n\t            this.directives.forEach(function (dir) {\n\t                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n\t                if (dir._control !== newCtrl) {\n\t                    cleanUpControl(dir._control, dir);\n\t                    if (newCtrl)\n\t                        setUpControl(newCtrl, dir);\n\t                    dir._control = newCtrl;\n\t                }\n\t            });\n\t            this.form._updateTreeValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateRegistrations = function () {\n\t            var _this = this;\n\t            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n\t            if (this._oldForm)\n\t                this._oldForm._registerOnCollectionChange(function () { });\n\t            this._oldForm = this.form;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateValidators = function () {\n\t            var /** @type {?} */ sync = composeValidators(this._validators);\n\t            this.form.validator = Validators.compose([this.form.validator, sync]);\n\t            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n\t            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._checkFormPresent = function () {\n\t            if (!this.form) {\n\t                ReactiveErrors.missingFormException();\n\t            }\n\t        };\n\t        FormGroupDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroup]',\n\t                        providers: [formDirectiveProvider$1],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n\t            'ngSubmit': [{ type: _angular_core.Output },],\n\t        };\n\t        return FormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formGroupNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the nested {@link FormGroup} you want to link, and\n\t      * will look for a {@link FormGroup} registered with that name in the parent\n\t      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t      * *\n\t      * Nested form groups can come in handy when you want to validate a sub-group of a\n\t      * form separately from the rest or when you'd like to group the values of certain\n\t      * controls into their own nested object.\n\t      * *\n\t      * **Access the group**: You can access the associated {@link FormGroup} using the\n\t      * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n\t      * *\n\t      * You can also access individual controls within the group using dot syntax.\n\t      * Ex: `this.form.get('name.first')`\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can set an initial value for each child control when instantiating\n\t      * the {@link FormGroup}, or you can set it programmatically later using\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the group, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t     */\n\t    var FormGroupName = (function (_super) {\n\t        __extends$12(FormGroupName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormGroupName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.groupParentException();\n\t            }\n\t        };\n\t        FormGroupName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n\t        };\n\t        return FormGroupName;\n\t    }(AbstractFormGroupDirective));\n\t    var /** @type {?} */ formArrayNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the nested {@link FormArray} you want to link, and\n\t      * will look for a {@link FormArray} registered with that name in the parent\n\t      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t      * *\n\t      * Nested form arrays can come in handy when you have a group of form controls but\n\t      * you're not sure how many there will be. Form arrays allow you to create new\n\t      * form controls dynamically.\n\t      * *\n\t      * **Access the array**: You can access the associated {@link FormArray} using the\n\t      * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n\t      * Ex: `this.form.get('cities')`.\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can set an initial value for each child control when instantiating\n\t      * the {@link FormArray}, or you can set the value programmatically later using the\n\t      * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n\t      * methods.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the array, you can\n\t      * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n\t      * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n\t      * status is re-calculated.\n\t      * *\n\t      * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n\t      * calling its {@link FormArray.push} method.\n\t      * Ex: `this.form.get('cities').push(new FormControl());`\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t     */\n\t    var FormArrayName = (function (_super) {\n\t        __extends$12(FormArrayName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormArrayName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormArray(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormArray(this);\n\t            }\n\t        };\n\t        Object.defineProperty(FormArrayName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormArray(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? (this._parent.formDirective) : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.arrayParentException();\n\t            }\n\t        };\n\t        FormArrayName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormArrayName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormArrayName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n\t        };\n\t        return FormArrayName;\n\t    }(ControlContainer));\n\t    /**\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function _hasInvalidParent(parent) {\n\t        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n\t            !(parent instanceof FormArrayName);\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ controlNameBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n\t    };\n\t    /**\n\t     *  element by name.\n\t      * *\n\t      * In other words, this directive ensures that any values written to the {@link FormControl}\n\t      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t      * any values written to the DOM element through user input will be reflected in the\n\t      * {@link FormControl} instance (view -> model).\n\t      * *\n\t      * *\n\t      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the {@link FormControl} instance you want to\n\t      * link, and will look for a {@link FormControl} registered with that name in the\n\t      * closest {@link FormGroup} or {@link FormArray} above it.\n\t      * *\n\t      * **Access the control**: You can access the {@link FormControl} associated with\n\t      * this directive by using the {@link AbstractControl.get} method.\n\t      * Ex: `this.form.get('first');`\n\t      * *\n\t      * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n\t      * See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set value**: You can set an initial value for the control when instantiating the\n\t      * {@link FormControl}, or you can set it programmatically later using\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * In this example, we create form controls for first name and last name.\n\t      * *\n\t      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t      * *\n\t      * To see `formControlName` examples with different form control types, see:\n\t      * *\n\t      * * Radio buttons: {@link RadioControlValueAccessor}\n\t      * * Selects: {@link SelectControlValueAccessor}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormControlName = (function (_super) {\n\t        __extends$10(FormControlName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this._added = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnChanges = function (changes) {\n\t            if (!this._added)\n\t                this._setUpControl();\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.viewModel = this.model;\n\t                this.formDirective.updateModel(this, this.model);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeControl(this);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        Object.defineProperty(FormControlName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof FormGroupName) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                ReactiveErrors.ngModelGroupException();\n\t            }\n\t            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n\t                !(this._parent instanceof FormArrayName)) {\n\t                ReactiveErrors.controlParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._setUpControl = function () {\n\t            this._checkParentType();\n\t            this._control = this.formDirective.addControl(this);\n\t            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                this.valueAccessor.setDisabledState(true);\n\t            }\n\t            this._added = true;\n\t        };\n\t        FormControlName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlName;\n\t    }(NgControl));\n\t\n\t    var __extends$13 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n\t        multi: true\n\t    };\n\t    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A Directive that adds the `required` validator to any controls marked with the\n\t      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input name=\"fullName\" ngModel required>\n\t      * ```\n\t      * *\n\t     */\n\t    var RequiredValidator = (function () {\n\t        function RequiredValidator() {\n\t        }\n\t        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._required; },\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._required = value != null && value !== false && \"\" + value !== 'false';\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.required(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        RequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n\t                        providers: [REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RequiredValidator.ctorParameters = function () { return []; };\n\t        RequiredValidator.propDecorators = {\n\t            'required': [{ type: _angular_core.Input },],\n\t        };\n\t        return RequiredValidator;\n\t    }());\n\t    /**\n\t     *  A Directive that adds the `required` validator to checkbox controls marked with the\n\t      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input type=\"checkbox\" name=\"active\" ngModel required>\n\t      * ```\n\t      * *\n\t     */\n\t    var CheckboxRequiredValidator = (function (_super) {\n\t        __extends$13(CheckboxRequiredValidator, _super);\n\t        function CheckboxRequiredValidator() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        CheckboxRequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.requiredTrue(c) : null;\n\t        };\n\t        CheckboxRequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n\t                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n\t        return CheckboxRequiredValidator;\n\t    }(RequiredValidator));\n\t    /**\n\t     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='min'}\n\t     */\n\t    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n\t      * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n\t      * *\n\t     */\n\t    var MinLengthValidator = (function () {\n\t        function MinLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('minlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.validate = function (c) {\n\t            return this.minlength == null ? null : this._validator(c);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n\t        };\n\t        MinLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n\t                        providers: [MIN_LENGTH_VALIDATOR],\n\t                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MinLengthValidator.ctorParameters = function () { return []; };\n\t        MinLengthValidator.propDecorators = {\n\t            'minlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MinLengthValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='max'}\n\t     */\n\t    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n\t      * `formControl`,\n\t      * or control with `ngModel` that also has a `maxlength` attribute.\n\t      * *\n\t     */\n\t    var MaxLengthValidator = (function () {\n\t        function MaxLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('maxlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.validate = function (c) {\n\t            return this.maxlength != null ? this._validator(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n\t        };\n\t        MaxLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n\t                        providers: [MAX_LENGTH_VALIDATOR],\n\t                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MaxLengthValidator.ctorParameters = function () { return []; };\n\t        MaxLengthValidator.propDecorators = {\n\t            'maxlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MaxLengthValidator;\n\t    }());\n\t    var /** @type {?} */ PATTERN_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A Directive that adds the `pattern` validator to any controls marked with the\n\t      * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n\t      * as the regex to validate Control value against.  Follows pattern attribute\n\t      * semantics; i.e. regex must match entire Control value.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n\t      * ```\n\t     */\n\t    var PatternValidator = (function () {\n\t        function PatternValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('pattern' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n\t        PatternValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n\t                        providers: [PATTERN_VALIDATOR],\n\t                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        PatternValidator.ctorParameters = function () { return []; };\n\t        PatternValidator.propDecorators = {\n\t            'pattern': [{ type: _angular_core.Input },],\n\t        };\n\t        return PatternValidator;\n\t    }());\n\t\n\t    /**\n\t     *  *\n\t      * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n\t      * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n\t      * forms.\n\t      * *\n\t      * *\n\t      * To use, inject `FormBuilder` into your component class. You can then call its methods\n\t      * directly.\n\t      * *\n\t      * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t     */\n\t    var FormBuilder = (function () {\n\t        function FormBuilder() {\n\t        }\n\t        /**\n\t         *  Construct a new {@link FormGroup} with the given map of configuration.\n\t          * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n\t          * *\n\t          * See the {@link FormGroup} constructor for more details.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} extra\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.group = function (controlsConfig, extra) {\n\t            if (extra === void 0) { extra = null; }\n\t            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n\t            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n\t            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n\t            return new FormGroup(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         *  Construct a new {@link FormControl} with the given `formState`,`validator`, and\n\t          * `asyncValidator`.\n\t          * *\n\t          * `formState` can either be a standalone value for the form control or an object\n\t          * that contains both a value and a disabled status.\n\t          * *\n\t         * @param {?} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            return new FormControl(formState, validator, asyncValidator);\n\t        };\n\t        /**\n\t         *  Construct a {@link FormArray} from the given `controlsConfig` array of\n\t          * configuration, with the given optional `validator` and `asyncValidator`.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n\t            var _this = this;\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n\t            return new FormArray(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * @param {?} controlsConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n\t            var _this = this;\n\t            var /** @type {?} */ controls = {};\n\t            Object.keys(controlsConfig).forEach(function (controlName) {\n\t                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n\t            });\n\t            return controls;\n\t        };\n\t        /**\n\t         * @param {?} controlConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._createControl = function (controlConfig) {\n\t            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n\t                controlConfig instanceof FormArray) {\n\t                return controlConfig;\n\t            }\n\t            else if (Array.isArray(controlConfig)) {\n\t                var /** @type {?} */ value = controlConfig[0];\n\t                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n\t                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n\t                return this.control(value, validator, asyncValidator);\n\t            }\n\t            else {\n\t                return this.control(controlConfig);\n\t            }\n\t        };\n\t        FormBuilder.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        FormBuilder.ctorParameters = function () { return []; };\n\t        return FormBuilder;\n\t    }());\n\t\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.0');\n\t\n\t    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n\t        NgSelectOption,\n\t        NgSelectMultipleOption,\n\t        DefaultValueAccessor,\n\t        NumberValueAccessor,\n\t        RangeValueAccessor,\n\t        CheckboxControlValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t        NgControlStatus,\n\t        NgControlStatusGroup,\n\t        RequiredValidator,\n\t        MinLengthValidator,\n\t        MaxLengthValidator,\n\t        PatternValidator,\n\t        CheckboxRequiredValidator,\n\t    ];\n\t    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n\t    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\t    /**\n\t     *  Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n\t     */\n\t    var InternalFormsSharedModule = (function () {\n\t        function InternalFormsSharedModule() {\n\t        }\n\t        InternalFormsSharedModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: SHARED_FORM_DIRECTIVES,\n\t                        exports: SHARED_FORM_DIRECTIVES,\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        InternalFormsSharedModule.ctorParameters = function () { return []; };\n\t        return InternalFormsSharedModule;\n\t    }());\n\t\n\t    /**\n\t     *  The ng module for forms.\n\t     */\n\t    var FormsModule = (function () {\n\t        function FormsModule() {\n\t        }\n\t        FormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n\t                        providers: [RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormsModule.ctorParameters = function () { return []; };\n\t        return FormsModule;\n\t    }());\n\t    /**\n\t     *  The ng module for reactive forms.\n\t     */\n\t    var ReactiveFormsModule = (function () {\n\t        function ReactiveFormsModule() {\n\t        }\n\t        ReactiveFormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n\t                        providers: [FormBuilder, RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ReactiveFormsModule.ctorParameters = function () { return []; };\n\t        return ReactiveFormsModule;\n\t    }());\n\t\n\t    exports.AbstractControlDirective = AbstractControlDirective;\n\t    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n\t    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n\t    exports.ControlContainer = ControlContainer;\n\t    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n\t    exports.DefaultValueAccessor = DefaultValueAccessor;\n\t    exports.NgControl = NgControl;\n\t    exports.NgControlStatus = NgControlStatus;\n\t    exports.NgControlStatusGroup = NgControlStatusGroup;\n\t    exports.NgForm = NgForm;\n\t    exports.NgModel = NgModel;\n\t    exports.NgModelGroup = NgModelGroup;\n\t    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n\t    exports.FormControlDirective = FormControlDirective;\n\t    exports.FormControlName = FormControlName;\n\t    exports.FormGroupDirective = FormGroupDirective;\n\t    exports.FormArrayName = FormArrayName;\n\t    exports.FormGroupName = FormGroupName;\n\t    exports.NgSelectOption = NgSelectOption;\n\t    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n\t    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n\t    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n\t    exports.MaxLengthValidator = MaxLengthValidator;\n\t    exports.MinLengthValidator = MinLengthValidator;\n\t    exports.PatternValidator = PatternValidator;\n\t    exports.RequiredValidator = RequiredValidator;\n\t    exports.FormBuilder = FormBuilder;\n\t    exports.AbstractControl = AbstractControl;\n\t    exports.FormArray = FormArray;\n\t    exports.FormControl = FormControl;\n\t    exports.FormGroup = FormGroup;\n\t    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n\t    exports.NG_VALIDATORS = NG_VALIDATORS;\n\t    exports.Validators = Validators;\n\t    exports.VERSION = VERSION;\n\t    exports.FormsModule = FormsModule;\n\t    exports.ReactiveFormsModule = ReactiveFormsModule;\n\t\n\t}));\n\n/***/ },\n/* 34 */,\n/* 35 */,\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar review_service_1 = __webpack_require__(30);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar Review_model_1 = __webpack_require__(37);\r\n\tvar ReviewFormComponent = (function () {\r\n\t    function ReviewFormComponent(reviewService) {\r\n\t        this.reviewService = reviewService;\r\n\t        this.reviewAdded = new core_1.EventEmitter();\r\n\t    }\r\n\t    ReviewFormComponent.prototype.ngOnInit = function () {\r\n\t        this.review = new Review_model_1.default(\"\", this.bookId);\r\n\t    };\r\n\t    ReviewFormComponent.prototype.submit = function () {\r\n\t        var _this = this;\r\n\t        this.errorMessage = \"\";\r\n\t        this.reviewService.addReview(this.review)\r\n\t            .then(function () { _this.reviewAdded.emit(); })\r\n\t            .catch(function (error) { return _this.errorMessage = error; });\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Output(), \r\n\t        __metadata('design:type', Object)\r\n\t    ], ReviewFormComponent.prototype, \"reviewAdded\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', Number)\r\n\t    ], ReviewFormComponent.prototype, \"bookId\", void 0);\r\n\t    ReviewFormComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'review-form',\r\n\t            template: \"<div *ngIf=\\\"errorMessage\\\" class=\\\"alert alert-danger\\\">\\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\\n                 </div>\\n                <form class=\\\"form-group form-inline col-sm-offset-1\\\" novalidate #reviewForm=\\\"ngForm\\\" name=\\\"reviewForm\\\" (ngSubmit)=\\\"submit()\\\">\\n                    <label class=\\\"control-label\\\">Review:\\n                    <input class=\\\"form-control\\\" required minlength=\\\"5\\\" type=\\\"text\\\" name=\\\"content\\\" #content=\\\"ngModel\\\" [(ngModel)]=\\\"review.content\\\" />\\n                    </label>\\n                    <button class=\\\"btn btn-primary\\\" [disabled]=\\\"!reviewForm.form.valid\\\" type=\\\"submit\\\">Add Review</button>\\n                   <div *ngIf=\\\"!(content.valid || content.pristine)\\\">\\n                     <div *ngIf=\\\"content.errors.required\\\" class=\\\"alert alert-danger\\\">\\n                        Review must have content\\n                    </div>\\n                    <div *ngIf=\\\"content.errors.minlength\\\" class=\\\"alert alert-danger\\\">\\n                        Review must be at least 5 characters long\\n                    </div>\\n                  </div>\\n                </form>\"\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof review_service_1.ReviewService !== 'undefined' && review_service_1.ReviewService) === 'function' && _a) || Object])\r\n\t    ], ReviewFormComponent);\r\n\t    return ReviewFormComponent;\r\n\t    var _a;\r\n\t}());\r\n\texports.ReviewFormComponent = ReviewFormComponent;\r\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Review = (function () {\r\n\t    function Review(content, bookId) {\r\n\t        this.content = content;\r\n\t        this.bookId = bookId;\r\n\t    }\r\n\t    return Review;\r\n\t}());\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.default = Review;\r\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(39);\r\n\tvar review_list_component_1 = __webpack_require__(69);\r\n\tvar reviewsRoutes = [\r\n\t    {\r\n\t        path: 'reviews/:id',\r\n\t        component: review_list_component_1.ReviewListComponent\r\n\t    }\r\n\t];\r\n\tvar ReviewsRoutesModule = (function () {\r\n\t    function ReviewsRoutesModule() {\r\n\t    }\r\n\t    ReviewsRoutesModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [router_1.RouterModule.forChild(reviewsRoutes)],\r\n\t            exports: [router_1.RouterModule]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], ReviewsRoutesModule);\r\n\t    return ReviewsRoutesModule;\r\n\t}());\r\n\texports.ReviewsRoutesModule = ReviewsRoutesModule;\r\n\n\n/***/ },\n/* 39 */,\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar animations_1 = __webpack_require__(70);\r\n\tvar book_service_1 = __webpack_require__(71);\r\n\tvar review_service_1 = __webpack_require__(30);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar router_1 = __webpack_require__(39);\r\n\tvar ReviewListComponent = (function () {\r\n\t    function ReviewListComponent(route, reviewService, bookService) {\r\n\t        this.route = route;\r\n\t        this.reviewService = reviewService;\r\n\t        this.bookService = bookService;\r\n\t        this.bookId = -1;\r\n\t    }\r\n\t    ReviewListComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this.bookId = +this.route.snapshot.params['id'];\r\n\t        this.bookService.getBook(this.bookId).then(function (book) { return _this.book = book; }).catch(function (error) { return _this.errorMessage = error; });\r\n\t        this.getReviews();\r\n\t    };\r\n\t    ReviewListComponent.prototype.getReviews = function () {\r\n\t        var _this = this;\r\n\t        this.reviewService.getReviews(this.bookId).then(function (reviews) { return _this.reviews = reviews; }).catch(function (error) { return _this.errorMessage = error; });\r\n\t    };\r\n\t    ReviewListComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'review-list',\r\n\t            template: \"<div class=\\\"container-fluid mainPanel\\\">    \\n                 <div *ngIf=\\\"errorMessage\\\" class=\\\"alert alert-danger\\\">\\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\\n                 </div>  \\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col-sm-offset-1 col-sm-3\\\">\\n                       <h2>{{book?.title}} <br>\\n                       by {{book?.author}}</h2>\\n                   </div>\\n                    <div class=\\\"col-sm-3\\\">\\n                       <img  src=\\\"{{book?.cover | noImage }}\\\" alt=\\\"{{book?.title + ' book cover'}}\\\" />\\n                    </div>  \\n                </div>               \\n                 <div class=\\\"row\\\">\\n                    <h2 class=\\\"col-sm-offset-1\\\">Reviews for {{book?.title}}</h2>\\n                    <review-form [bookId]=bookId (reviewAdded)=\\\"getReviews()\\\"></review-form>\\n                    <div class=\\\"col-lg-8 col-sm-offset-1\\\">\\n                        <table class=\\\"table table-border table-striped\\\">\\n                            <thead>\\n                                <tr>\\n                                    <th>Review</th>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <tr *ngFor=\\\"let review of reviews\\\">\\n                                      <td>{{review.content}}</td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n              </div>\",\r\n\t            animations: [animations_1.routeChange()],\r\n\t            host: { '[@routeChange]': '' }\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof review_service_1.ReviewService !== 'undefined' && review_service_1.ReviewService) === 'function' && _b) || Object, (typeof (_c = typeof book_service_1.BookService !== 'undefined' && book_service_1.BookService) === 'function' && _c) || Object])\r\n\t    ], ReviewListComponent);\r\n\t    return ReviewListComponent;\r\n\t    var _a, _b, _c;\r\n\t}());\r\n\texports.ReviewListComponent = ReviewListComponent;\r\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(3);\r\n\tfunction routeChange() {\r\n\t    return core_1.trigger('routeChange', [\r\n\t        core_1.state('void', core_1.style({ position: 'fixed', width: '100%' })),\r\n\t        core_1.transition(':enter', [\r\n\t            core_1.style({ transform: 'translateX(100%)' }),\r\n\t            core_1.animate('0.5s ease-in-out', core_1.style({ transform: 'translateX(0%)' }))\r\n\t        ]),\r\n\t        core_1.transition(':leave', [\r\n\t            core_1.animate('0.1s ease-in-out', core_1.style({ opacity: '0' }))\r\n\t        ])\r\n\t    ]);\r\n\t}\r\n\texports.routeChange = routeChange;\r\n\tfunction slideUp() {\r\n\t    return core_1.trigger('slideUp', [\r\n\t        core_1.transition(':enter', [\r\n\t            core_1.animate(400, core_1.keyframes([\r\n\t                core_1.style({ transform: 'translateY(+200%)', offset: 0 }),\r\n\t                core_1.style({ transform: 'translateY(10px)', offset: 0.6 }),\r\n\t                core_1.style({ transform: 'translateY(0)', offset: 1.0 })\r\n\t            ]))\r\n\t        ])\r\n\t    ]);\r\n\t}\r\n\texports.slideUp = slideUp;\r\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar Observable_1 = __webpack_require__(5);\r\n\tvar rest_helper_service_1 = __webpack_require__(27);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar http_1 = __webpack_require__(28);\r\n\t__webpack_require__(72);\r\n\t__webpack_require__(31);\r\n\t__webpack_require__(73);\r\n\tvar BookService = (function () {\r\n\t    function BookService(http, restHelper) {\r\n\t        this.http = http;\r\n\t        this.restHelper = restHelper;\r\n\t    }\r\n\t    BookService.prototype.getBooks = function () {\r\n\t        return this.http.get(this.restHelper.url + \"Books\")\r\n\t            .map(function (res) { return res.json(); });\r\n\t    };\r\n\t    BookService.prototype.getBooksByTitle = function (title) {\r\n\t        if (title) {\r\n\t            return this.http.get(this.restHelper.url + \"BooksByTitle/\" + title)\r\n\t                .map(function (res) { return res.json(); });\r\n\t        }\r\n\t        else {\r\n\t            return this.getBooks();\r\n\t        }\r\n\t    };\r\n\t    BookService.prototype.getBook = function (bookId) {\r\n\t        return this.http.get(this.restHelper.url + \"Book/\" + bookId)\r\n\t            .toPromise().then(function (res) { return res.json(); }).catch(this.restHelper.handleError);\r\n\t    };\r\n\t    BookService.prototype.addBook = function (book) {\r\n\t        var headers = new http_1.Headers({\r\n\t            'content-type': 'application/json'\r\n\t        });\r\n\t        return this.http.post(this.restHelper.url + \"Books\", book, {\r\n\t            headers: headers\r\n\t        }).toPromise()\r\n\t            .then(function (res) { return res.json(); }).catch(this.restHelper.handleError);\r\n\t    };\r\n\t    BookService.prototype.handleObservableError = function (error) {\r\n\t        return Observable_1.Observable.throw(this.restHelper.buildErrorString(error));\r\n\t    };\r\n\t    BookService = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, (typeof (_b = typeof rest_helper_service_1.RestHelperService !== 'undefined' && rest_helper_service_1.RestHelperService) === 'function' && _b) || Object])\r\n\t    ], BookService);\r\n\t    return BookService;\r\n\t    var _a, _b;\r\n\t}());\r\n\texports.BookService = BookService;\r\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\tvar catch_1 = __webpack_require__(64);\n\tObservable_1.Observable.prototype.catch = catch_1._catch;\n\tObservable_1.Observable.prototype._catch = catch_1._catch;\n\t//# sourceMappingURL=catch.js.map\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\tvar map_1 = __webpack_require__(62);\n\tObservable_1.Observable.prototype.map = map_1.map;\n\t//# sourceMappingURL=map.js.map\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar about_component_1 = __webpack_require__(75);\r\n\tvar book_list_component_1 = __webpack_require__(77);\r\n\tvar router_1 = __webpack_require__(39);\r\n\tvar routes = [\r\n\t    {\r\n\t        path: '',\r\n\t        component: book_list_component_1.BookListComponent\r\n\t    },\r\n\t    {\r\n\t        path: 'about',\r\n\t        component: about_component_1.AboutComponent\r\n\t    },\r\n\t    {\r\n\t        path: '**',\r\n\t        redirectTo: '/'\r\n\t    }];\r\n\tvar AppRoutesModule = (function () {\r\n\t    function AppRoutesModule() {\r\n\t    }\r\n\t    AppRoutesModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [router_1.RouterModule.forRoot(routes)],\r\n\t            exports: [router_1.RouterModule]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AppRoutesModule);\r\n\t    return AppRoutesModule;\r\n\t}());\r\n\texports.AppRoutesModule = AppRoutesModule;\r\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar animations_1 = __webpack_require__(70);\r\n\tvar AboutComponent = (function () {\r\n\t    function AboutComponent() {\r\n\t    }\r\n\t    AboutComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'about',\r\n\t            template: __webpack_require__(76),\r\n\t            animations: [animations_1.routeChange()],\r\n\t            host: { '[@routeChange]': '' }\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AboutComponent);\r\n\t    return AboutComponent;\r\n\t}());\r\n\texports.AboutComponent = AboutComponent;\r\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"row\\\">\\r\\n    <h2>Angles on Books</h2>\\r\\n</div>\\r\\n<div>\\r\\n    Where you can give your angle on books.\\r\\n</div>\\r\\n\\t\\t\\t\\t\";\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar animations_1 = __webpack_require__(70);\r\n\tvar book_service_1 = __webpack_require__(71);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar BehaviorSubject_1 = __webpack_require__(40);\r\n\t__webpack_require__(78);\r\n\t__webpack_require__(85);\r\n\tvar BookListComponent = (function () {\r\n\t    function BookListComponent(bookService) {\r\n\t        var _this = this;\r\n\t        this.bookService = bookService;\r\n\t        this.searchTermStream = new BehaviorSubject_1.BehaviorSubject(\"\");\r\n\t        this.books = this.searchTermStream\r\n\t            .debounceTime(500)\r\n\t            .switchMap(function (term) { return _this.bookService.getBooksByTitle(term); })\r\n\t            .catch(function (error) { return _this.errorMessage = error; });\r\n\t    }\r\n\t    BookListComponent.prototype.search = function (term) {\r\n\t        this.searchTermStream.next(term);\r\n\t    };\r\n\t    BookListComponent.prototype.addBook = function (book) {\r\n\t        var _this = this;\r\n\t        this.bookService.addBook(book).then(function () {\r\n\t            _this.search(\"\");\r\n\t        }).catch(function (error) { return _this.errorMessage = error; });\r\n\t    };\r\n\t    BookListComponent.prototype.trackBook = function (i, book) {\r\n\t        return book.bookId;\r\n\t    };\r\n\t    BookListComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'book-list',\r\n\t            template: \"<div class=\\\"container-fluid mainPanel\\\">\\n                <div class=\\\"row\\\">\\n                    <h2 class=\\\"col-sm-offset-1\\\">Books</h2>\\n                    <div *ngIf=\\\"errorMessage\\\" class=\\\"alert alert-danger\\\">\\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\\n                    </div>                \\n                    <book-form (createBook)=\\\"addBook($event)\\\"></book-form>\\n                    <div class=\\\"col-lg-8 col-sm-offset-1\\\">\\n                        <table class=\\\"table table-border table-striped\\\">\\n                            <thead>\\n                                <tr>\\n                                    <th>Title</th>\\n                                    <th>Author</th>\\n                                    <th>Cover</th>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"3\\\">\\n                                        <label>Search by title: <input #term (keyup)=\\\"search(term.value)\\\"  /></label>\\n                                    </td>\\n                                </tr>                                    \\n                            </thead>\\n                            <tbody>\\n                                <tr [@slideUp] *ngFor=\\\"let book of books | async; trackBy:trackBook\\\">\\n                                      <td><a [routerLink]=\\\"['/reviews/' + book.bookId]\\\">{{book.title}}</a></td>\\n                                    <td>{{book.author}}</td>\\n                                    <td><img  src=\\\"{{book.cover | noImage}}\\\" alt=\\\"{{book.title + ' book cover'}}\\\" /></td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n              </div>\",\r\n\t            animations: [animations_1.routeChange(), animations_1.slideUp()],\r\n\t            host: { '[@routeChange]': '' }\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof book_service_1.BookService !== 'undefined' && book_service_1.BookService) === 'function' && _a) || Object])\r\n\t    ], BookListComponent);\r\n\t    return BookListComponent;\r\n\t    var _a;\r\n\t}());\r\n\texports.BookListComponent = BookListComponent;\r\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\tvar debounceTime_1 = __webpack_require__(79);\n\tObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n\t//# sourceMappingURL=debounceTime.js.map\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(8);\n\tvar async_1 = __webpack_require__(80);\n\t/**\n\t * Emits a value from the source Observable only after a particular time span\n\t * has passed without another source emission.\n\t *\n\t * <span class=\"informal\">It's like {@link delay}, but passes only the most\n\t * recent value from each burst of emissions.</span>\n\t *\n\t * <img src=\"./img/debounceTime.png\" width=\"100%\">\n\t *\n\t * `debounceTime` delays values emitted by the source Observable, but drops\n\t * previous pending delayed emissions if a new value arrives on the source\n\t * Observable. This operator keeps track of the most recent value from the\n\t * source Observable, and emits that only when `dueTime` enough time has passed\n\t * without any other value appearing on the source Observable. If a new value\n\t * appears before `dueTime` silence occurs, the previous value will be dropped\n\t * and will not be emitted on the output Observable.\n\t *\n\t * This is a rate-limiting operator, because it is impossible for more than one\n\t * value to be emitted in any time window of duration `dueTime`, but it is also\n\t * a delay-like operator since output emissions do not occur at the same time as\n\t * they did on the source Observable. Optionally takes a {@link Scheduler} for\n\t * managing timers.\n\t *\n\t * @example <caption>Emit the most recent click after a burst of clicks</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.debounceTime(1000);\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link auditTime}\n\t * @see {@link debounce}\n\t * @see {@link delay}\n\t * @see {@link sampleTime}\n\t * @see {@link throttleTime}\n\t *\n\t * @param {number} dueTime The timeout duration in milliseconds (or the time\n\t * unit determined internally by the optional `scheduler`) for the window of\n\t * time required to wait for emission silence before emitting the most recent\n\t * source value.\n\t * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n\t * managing the timers that handle the timeout for each value.\n\t * @return {Observable} An Observable that delays the emissions of the source\n\t * Observable by the specified `dueTime`, and may drop some values if they occur\n\t * too frequently.\n\t * @method debounceTime\n\t * @owner Observable\n\t */\n\tfunction debounceTime(dueTime, scheduler) {\n\t    if (scheduler === void 0) { scheduler = async_1.async; }\n\t    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n\t}\n\texports.debounceTime = debounceTime;\n\tvar DebounceTimeOperator = (function () {\n\t    function DebounceTimeOperator(dueTime, scheduler) {\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t    }\n\t    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n\t        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n\t    };\n\t    return DebounceTimeOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar DebounceTimeSubscriber = (function (_super) {\n\t    __extends(DebounceTimeSubscriber, _super);\n\t    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n\t        _super.call(this, destination);\n\t        this.dueTime = dueTime;\n\t        this.scheduler = scheduler;\n\t        this.debouncedSubscription = null;\n\t        this.lastValue = null;\n\t        this.hasValue = false;\n\t    }\n\t    DebounceTimeSubscriber.prototype._next = function (value) {\n\t        this.clearDebounce();\n\t        this.lastValue = value;\n\t        this.hasValue = true;\n\t        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n\t    };\n\t    DebounceTimeSubscriber.prototype._complete = function () {\n\t        this.debouncedNext();\n\t        this.destination.complete();\n\t    };\n\t    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n\t        this.clearDebounce();\n\t        if (this.hasValue) {\n\t            this.destination.next(this.lastValue);\n\t            this.lastValue = null;\n\t            this.hasValue = false;\n\t        }\n\t    };\n\t    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n\t        var debouncedSubscription = this.debouncedSubscription;\n\t        if (debouncedSubscription !== null) {\n\t            this.remove(debouncedSubscription);\n\t            debouncedSubscription.unsubscribe();\n\t            this.debouncedSubscription = null;\n\t        }\n\t    };\n\t    return DebounceTimeSubscriber;\n\t}(Subscriber_1.Subscriber));\n\tfunction dispatchNext(subscriber) {\n\t    subscriber.debouncedNext();\n\t}\n\t//# sourceMappingURL=debounceTime.js.map\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar AsyncAction_1 = __webpack_require__(81);\n\tvar AsyncScheduler_1 = __webpack_require__(83);\n\texports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n\t//# sourceMappingURL=async.js.map\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(6);\n\tvar Action_1 = __webpack_require__(82);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsyncAction = (function (_super) {\n\t    __extends(AsyncAction, _super);\n\t    function AsyncAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.pending = false;\n\t    }\n\t    AsyncAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.closed) {\n\t            return this;\n\t        }\n\t        // Always replace the current state with the new state.\n\t        this.state = state;\n\t        // Set the pending flag indicating that this action has been scheduled, or\n\t        // has recursively rescheduled itself.\n\t        this.pending = true;\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        //\n\t        // Important implementation note:\n\t        //\n\t        // Actions only execute once by default, unless rescheduled from within the\n\t        // scheduled callback. This allows us to implement single and repeat\n\t        // actions via the same code path, without adding API surface area, as well\n\t        // as mimic traditional recursion but across asynchronous boundaries.\n\t        //\n\t        // However, JS runtimes and timers distinguish between intervals achieved by\n\t        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n\t        // serial `setTimeout` calls can be individually delayed, which delays\n\t        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n\t        // guarantee the interval callback will be invoked more precisely to the\n\t        // interval period, regardless of load.\n\t        //\n\t        // Therefore, we use `setInterval` to schedule single and repeat actions.\n\t        // If the action reschedules itself with the same delay, the interval is not\n\t        // canceled. If the action doesn't reschedule, or reschedules with a\n\t        // different delay, the interval will be canceled after scheduled callback\n\t        // execution.\n\t        //\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, delay);\n\t        }\n\t        this.delay = delay;\n\t        // If this action has already an async Id, don't request a new one.\n\t        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\t        return this;\n\t    };\n\t    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n\t    };\n\t    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If this action is rescheduled with the same delay time, don't clear the interval id.\n\t        if (delay !== null && this.delay === delay) {\n\t            return id;\n\t        }\n\t        // Otherwise, if the action's delay time is different from the current delay,\n\t        // clear the interval id\n\t        return root_1.root.clearInterval(id) && undefined || undefined;\n\t    };\n\t    /**\n\t     * Immediately executes this action and the `work` it contains.\n\t     * @return {any}\n\t     */\n\t    AsyncAction.prototype.execute = function (state, delay) {\n\t        if (this.closed) {\n\t            return new Error('executing a cancelled action');\n\t        }\n\t        this.pending = false;\n\t        var error = this._execute(state, delay);\n\t        if (error) {\n\t            return error;\n\t        }\n\t        else if (this.pending === false && this.id != null) {\n\t            // Dequeue if the action didn't reschedule itself. Don't call\n\t            // unsubscribe(), because the action could reschedule later.\n\t            // For example:\n\t            // ```\n\t            // scheduler.schedule(function doWork(counter) {\n\t            //   /* ... I'm a busy worker bee ... */\n\t            //   var originalAction = this;\n\t            //   /* wait 100ms before rescheduling the action */\n\t            //   setTimeout(function () {\n\t            //     originalAction.schedule(counter + 1);\n\t            //   }, 100);\n\t            // }, 1000);\n\t            // ```\n\t            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n\t        }\n\t    };\n\t    AsyncAction.prototype._execute = function (state, delay) {\n\t        var errored = false;\n\t        var errorValue = undefined;\n\t        try {\n\t            this.work(state);\n\t        }\n\t        catch (e) {\n\t            errored = true;\n\t            errorValue = !!e && e || new Error(e);\n\t        }\n\t        if (errored) {\n\t            this.unsubscribe();\n\t            return errorValue;\n\t        }\n\t    };\n\t    AsyncAction.prototype._unsubscribe = function () {\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        var actions = scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        this.work = null;\n\t        this.delay = null;\n\t        this.state = null;\n\t        this.pending = false;\n\t        this.scheduler = null;\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, null);\n\t        }\n\t    };\n\t    return AsyncAction;\n\t}(Action_1.Action));\n\texports.AsyncAction = AsyncAction;\n\t//# sourceMappingURL=AsyncAction.js.map\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(10);\n\t/**\n\t * A unit of work to be executed in a {@link Scheduler}. An action is typically\n\t * created from within a Scheduler and an RxJS user does not need to concern\n\t * themselves about creating and manipulating an Action.\n\t *\n\t * ```ts\n\t * class Action<T> extends Subscription {\n\t *   new (scheduler: Scheduler, work: (state?: T) => void);\n\t *   schedule(state?: T, delay: number = 0): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Action<T>\n\t */\n\tvar Action = (function (_super) {\n\t    __extends(Action, _super);\n\t    function Action(scheduler, work) {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Schedules this action on its parent Scheduler for execution. May be passed\n\t     * some context object, `state`. May happen at some point in the future,\n\t     * according to the `delay` parameter, if specified.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler.\n\t     * @return {void}\n\t     */\n\t    Action.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return this;\n\t    };\n\t    return Action;\n\t}(Subscription_1.Subscription));\n\texports.Action = Action;\n\t//# sourceMappingURL=Action.js.map\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Scheduler_1 = __webpack_require__(84);\n\tvar AsyncScheduler = (function (_super) {\n\t    __extends(AsyncScheduler, _super);\n\t    function AsyncScheduler() {\n\t        _super.apply(this, arguments);\n\t        this.actions = [];\n\t        /**\n\t         * A flag to indicate whether the Scheduler is currently executing a batch of\n\t         * queued actions.\n\t         * @type {boolean}\n\t         */\n\t        this.active = false;\n\t        /**\n\t         * An internal ID used to track the latest asynchronous task such as those\n\t         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n\t         * others.\n\t         * @type {any}\n\t         */\n\t        this.scheduled = undefined;\n\t    }\n\t    AsyncScheduler.prototype.flush = function (action) {\n\t        var actions = this.actions;\n\t        if (this.active) {\n\t            actions.push(action);\n\t            return;\n\t        }\n\t        var error;\n\t        this.active = true;\n\t        do {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        } while (action = actions.shift()); // exhaust the scheduler queue\n\t        this.active = false;\n\t        if (error) {\n\t            while (action = actions.shift()) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    return AsyncScheduler;\n\t}(Scheduler_1.Scheduler));\n\texports.AsyncScheduler = AsyncScheduler;\n\t//# sourceMappingURL=AsyncScheduler.js.map\n\n/***/ },\n/* 84 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * An execution context and a data structure to order tasks and schedule their\n\t * execution. Provides a notion of (potentially virtual) time, through the\n\t * `now()` getter method.\n\t *\n\t * Each unit of work in a Scheduler is called an {@link Action}.\n\t *\n\t * ```ts\n\t * class Scheduler {\n\t *   now(): number;\n\t *   schedule(work, delay?, state?): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Scheduler\n\t */\n\tvar Scheduler = (function () {\n\t    function Scheduler(SchedulerAction, now) {\n\t        if (now === void 0) { now = Scheduler.now; }\n\t        this.SchedulerAction = SchedulerAction;\n\t        this.now = now;\n\t    }\n\t    /**\n\t     * Schedules a function, `work`, for execution. May happen at some point in\n\t     * the future, according to the `delay` parameter, if specified. May be passed\n\t     * some context object, `state`, which will be passed to the `work` function.\n\t     *\n\t     * The given arguments will be processed an stored as an Action object in a\n\t     * queue of actions.\n\t     *\n\t     * @param {function(state: ?T): ?Subscription} work A function representing a\n\t     * task, or some unit of work to be executed by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler itself.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @return {Subscription} A subscription in order to be able to unsubscribe\n\t     * the scheduled work.\n\t     */\n\t    Scheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return new this.SchedulerAction(this, work).schedule(state, delay);\n\t    };\n\t    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n\t    return Scheduler;\n\t}());\n\texports.Scheduler = Scheduler;\n\t//# sourceMappingURL=Scheduler.js.map\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\tvar switchMap_1 = __webpack_require__(86);\n\tObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n\t//# sourceMappingURL=switchMap.js.map\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar OuterSubscriber_1 = __webpack_require__(58);\n\tvar subscribeToResult_1 = __webpack_require__(56);\n\t/* tslint:disable:max-line-length */\n\t/**\n\t * Projects each source value to an Observable which is merged in the output\n\t * Observable, emitting values only from the most recently projected Observable.\n\t *\n\t * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n\t * these inner Observables using {@link switch}.</span>\n\t *\n\t * <img src=\"./img/switchMap.png\" width=\"100%\">\n\t *\n\t * Returns an Observable that emits items based on applying a function that you\n\t * supply to each item emitted by the source Observable, where that function\n\t * returns an (so-called \"inner\") Observable. Each time it observes one of these\n\t * inner Observables, the output Observable begins emitting the items emitted by\n\t * that inner Observable. When a new inner Observable is emitted, `switchMap`\n\t * stops emitting items from the earlier-emitted inner Observable and begins\n\t * emitting items from the new one. It continues to behave like this for\n\t * subsequent inner Observables.\n\t *\n\t * @example <caption>Rerun an interval Observable on every click event</caption>\n\t * var clicks = Rx.Observable.fromEvent(document, 'click');\n\t * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n\t * result.subscribe(x => console.log(x));\n\t *\n\t * @see {@link concatMap}\n\t * @see {@link exhaustMap}\n\t * @see {@link mergeMap}\n\t * @see {@link switch}\n\t * @see {@link switchMapTo}\n\t *\n\t * @param {function(value: T, ?index: number): Observable} project A function\n\t * that, when applied to an item emitted by the source Observable, returns an\n\t * Observable.\n\t * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n\t * A function to produce the value on the output Observable based on the values\n\t * and the indices of the source (outer) emission and the inner Observable\n\t * emission. The arguments passed to this function are:\n\t * - `outerValue`: the value that came from the source\n\t * - `innerValue`: the value that came from the projected Observable\n\t * - `outerIndex`: the \"index\" of the value that came from the source\n\t * - `innerIndex`: the \"index\" of the value from the projected Observable\n\t * @return {Observable} An Observable that emits the result of applying the\n\t * projection function (and the optional `resultSelector`) to each item emitted\n\t * by the source Observable and taking only the values from the most recently\n\t * projected inner Observable.\n\t * @method switchMap\n\t * @owner Observable\n\t */\n\tfunction switchMap(project, resultSelector) {\n\t    return this.lift(new SwitchMapOperator(project, resultSelector));\n\t}\n\texports.switchMap = switchMap;\n\tvar SwitchMapOperator = (function () {\n\t    function SwitchMapOperator(project, resultSelector) {\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t    }\n\t    SwitchMapOperator.prototype.call = function (subscriber, source) {\n\t        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n\t    };\n\t    return SwitchMapOperator;\n\t}());\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SwitchMapSubscriber = (function (_super) {\n\t    __extends(SwitchMapSubscriber, _super);\n\t    function SwitchMapSubscriber(destination, project, resultSelector) {\n\t        _super.call(this, destination);\n\t        this.project = project;\n\t        this.resultSelector = resultSelector;\n\t        this.index = 0;\n\t    }\n\t    SwitchMapSubscriber.prototype._next = function (value) {\n\t        var result;\n\t        var index = this.index++;\n\t        try {\n\t            result = this.project(value, index);\n\t        }\n\t        catch (error) {\n\t            this.destination.error(error);\n\t            return;\n\t        }\n\t        this._innerSub(result, value, index);\n\t    };\n\t    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (innerSubscription) {\n\t            innerSubscription.unsubscribe();\n\t        }\n\t        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n\t    };\n\t    SwitchMapSubscriber.prototype._complete = function () {\n\t        var innerSubscription = this.innerSubscription;\n\t        if (!innerSubscription || innerSubscription.closed) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._unsubscribe = function () {\n\t        this.innerSubscription = null;\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n\t        this.remove(innerSub);\n\t        this.innerSubscription = null;\n\t        if (this.isStopped) {\n\t            _super.prototype._complete.call(this);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n\t        if (this.resultSelector) {\n\t            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        else {\n\t            this.destination.next(innerValue);\n\t        }\n\t    };\n\t    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n\t        var result;\n\t        try {\n\t            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n\t        }\n\t        catch (err) {\n\t            this.destination.error(err);\n\t            return;\n\t        }\n\t        this.destination.next(result);\n\t    };\n\t    return SwitchMapSubscriber;\n\t}(OuterSubscriber_1.OuterSubscriber));\n\t//# sourceMappingURL=switchMap.js.map\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar shared_module_1 = __webpack_require__(25);\r\n\tvar book_service_1 = __webpack_require__(71);\r\n\tvar common_1 = __webpack_require__(22);\r\n\tvar book_form_component_1 = __webpack_require__(88);\r\n\tvar book_list_component_1 = __webpack_require__(77);\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar forms_1 = __webpack_require__(33);\r\n\tvar router_1 = __webpack_require__(39);\r\n\tvar BooksModule = (function () {\r\n\t    function BooksModule() {\r\n\t    }\r\n\t    BooksModule = __decorate([\r\n\t        core_1.NgModule({\r\n\t            imports: [common_1.CommonModule, forms_1.ReactiveFormsModule, router_1.RouterModule, shared_module_1.SharedModule],\r\n\t            providers: [book_service_1.BookService],\r\n\t            declarations: [book_list_component_1.BookListComponent, book_form_component_1.BookFormComponent],\r\n\t            exports: [book_list_component_1.BookListComponent]\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], BooksModule);\r\n\t    return BooksModule;\r\n\t}());\r\n\texports.BooksModule = BooksModule;\r\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\tvar forms_1 = __webpack_require__(33);\r\n\tvar Book_model_1 = __webpack_require__(89);\r\n\tvar BookFormComponent = (function () {\r\n\t    function BookFormComponent(formBuilder) {\r\n\t        this.formBuilder = formBuilder;\r\n\t        this.cover = \"\";\r\n\t        this.createBook = new core_1.EventEmitter();\r\n\t    }\r\n\t    BookFormComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this.bookForm = this.formBuilder.group({\r\n\t            title: [\"\", forms_1.Validators.compose([forms_1.Validators.required, forms_1.Validators.minLength(3), forms_1.Validators.pattern(\"^[a-zA-Z0-9 ]*$\")])],\r\n\t            author: [\"\", forms_1.Validators.required]\r\n\t        });\r\n\t        this.sub = this.bookForm.valueChanges\r\n\t            .subscribe(function (value) {\r\n\t            value.title = _this.toTitleCase(value.title);\r\n\t            _this.bookForm.patchValue({ title: value.title }, { emitEvent: false });\r\n\t            //debug code\r\n\t            // console.log(\"Form  value = \", value);\r\n\t        });\r\n\t    };\r\n\t    BookFormComponent.prototype.ngOnDestroy = function () {\r\n\t        this.sub.unsubscribe();\r\n\t    };\r\n\t    BookFormComponent.prototype.add = function () {\r\n\t        this.createBook.emit(new Book_model_1.default(this.bookForm.get('title').value, this.bookForm.get('author').value, this.cover, -1));\r\n\t        this.bookForm.reset();\r\n\t        this.cover = '';\r\n\t    };\r\n\t    BookFormComponent.prototype.toTitleCase = function (s) {\r\n\t        if ((s === null) || (s === '')) {\r\n\t            return '';\r\n\t        }\r\n\t        return s.replace(/\\w\\S*/g, function (t) {\r\n\t            return t.charAt(0).toUpperCase() + t.substr(1).toLowerCase();\r\n\t        });\r\n\t    };\r\n\t    BookFormComponent.prototype.onDrop = function (e) {\r\n\t        var comp = this;\r\n\t        var size = 160;\r\n\t        var oldHeight;\r\n\t        var oldWidth;\r\n\t        var newHeight;\r\n\t        var newWidth;\r\n\t        var files = e.target.files || e.dataTransfer.files;\r\n\t        if (files && files.length > 0) {\r\n\t            var f = files[0];\r\n\t            var reader = new FileReader();\r\n\t            reader.onload = (function (f) {\r\n\t                return function (e2) {\r\n\t                    var image = new Image();\r\n\t                    image.onload = function () {\r\n\t                        oldHeight = this.height;\r\n\t                        oldWidth = this.width;\r\n\t                        newHeight = oldHeight;\r\n\t                        newWidth = oldWidth;\r\n\t                        if (oldHeight > size) {\r\n\t                            newHeight = size;\r\n\t                            newWidth = (newHeight * oldWidth) / oldHeight;\r\n\t                        }\r\n\t                        if (newWidth > size) {\r\n\t                            var oldWidth_1 = newWidth;\r\n\t                            newWidth = size;\r\n\t                            newHeight = (newWidth * newHeight) / oldWidth_1;\r\n\t                        }\r\n\t                        var canvas = document.createElement(\"canvas\");\r\n\t                        var ctx = canvas.getContext(\"2d\");\r\n\t                        canvas.width = newWidth;\r\n\t                        canvas.height = newHeight;\r\n\t                        ctx.drawImage(image, 0, 0, newWidth, newHeight);\r\n\t                        //your code here        \r\n\t                        comp.cover = canvas.toDataURL(f.type);\r\n\t                    };\r\n\t                    image.src = e2.target.result;\r\n\t                };\r\n\t            })(f);\r\n\t            reader.readAsDataURL(f);\r\n\t        }\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Output(), \r\n\t        __metadata('design:type', Object)\r\n\t    ], BookFormComponent.prototype, \"createBook\", void 0);\r\n\t    BookFormComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'book-form',\r\n\t            template: \"<form class=\\\"form-group form-inline col-sm-offset-1\\\" novalidate [formGroup]=\\\"bookForm\\\" (ngSubmit)=\\\"add()\\\">\\n                <label class=\\\"control-label\\\">Title:\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\" /></label>\\n\\t\\t        <label class=\\\"control-label\\\">Author:\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"author\\\" /></label>\\n                <div class=\\\"form-group form-inline\\\" >\\n                    <img  src=\\\"{{cover | noImage}}\\\"  bkDragDrop (onDropped)=\\\"onDrop($event)\\\" />\\n                </div> \\n      \\t\\t    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  [disabled]=\\\"!bookForm.valid\\\">Add Book</button>             \\n                <div *ngIf=\\\"bookForm.get('title').hasError('required') && !bookForm.get('title').pristine\\\" class=\\\"alert alert-danger\\\">\\n                    Title is required\\n                </div>\\n                <div *ngIf=\\\"bookForm.get('title').hasError('minlength') && !bookForm.get('author').pristine && !bookForm.get('title').pristine\\\" class=\\\"alert alert-danger\\\">\\n                    Title must be at least 3 characters\\n                </div> \\n                <div *ngIf=\\\"bookForm.get('title').hasError('pattern') && !bookForm.get('title').pristine\\\" class=\\\"alert alert-danger\\\">\\n                    Only letters and numbers are allowed\\n                </div>               \\n                <div *ngIf=\\\"bookForm.get('author').hasError('required') && !bookForm.get('author').pristine\\\" class=\\\"alert alert-danger\\\">\\n                    Author is required\\n                </div>\\n               </form>\"\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object])\r\n\t    ], BookFormComponent);\r\n\t    return BookFormComponent;\r\n\t    var _a;\r\n\t}());\r\n\texports.BookFormComponent = BookFormComponent;\r\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Book = (function () {\r\n\t    function Book(title, author, cover, bookId) {\r\n\t        this.title = title;\r\n\t        this.author = author;\r\n\t        this.cover = cover;\r\n\t        this.bookId = bookId;\r\n\t    }\r\n\t    return Book;\r\n\t}());\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.default = Book;\r\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(3);\r\n\t__webpack_require__(91);\r\n\t__webpack_require__(100);\r\n\tvar AppComponent = (function () {\r\n\t    function AppComponent() {\r\n\t        this.name = 'Angles On Books';\r\n\t    }\r\n\t    AppComponent = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'my-app',\r\n\t            template: \"<h1>Welcome to {{name}}</h1>\\n             <div class=\\\"row navbar navbar-default\\\">\\n                 <ul class=\\\"nav navbar-nav\\\">\\n                    <li>\\n                      <a  routerLink=\\\"/\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{exact: true}\\\">home</a>\\n                    </li>\\n                    <li>\\n                      <a  routerLink=\\\"/about\\\" routerLinkActive=\\\"active\\\">about</a>\\n                    </li>\\n                 </ul>\\n             </div>\\n             <div class=\\\"container-fluid\\\">\\n                  <router-outlet></router-outlet>\\n             </div>\",\r\n\t            styles: ['.active { font-weight: bold; border: 1px solid black }']\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], AppComponent);\r\n\t    return AppComponent;\r\n\t}());\r\n\texports.AppComponent = AppComponent;\r\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */\n91\n]);\n\n\n/** WEBPACK FOOTER **\n ** app.ee2bd9d5abe4eca73a81.js\n **/","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\nif (process.env.ENV === 'production') {\r\n  enableProdMode();\r\n}\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/main.ts\n **/","import { ReviewsModule } from './reviews/reviews.module';\r\nimport { AppRoutesModule  } from './app-routes.module';\r\nimport { BooksModule } from './books/books.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule }  from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { AboutComponent } from './about.component';\r\nimport { HttpModule } from '@angular/http';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule, BooksModule, ReviewsModule, AppRoutesModule, HttpModule\r\n  ],\r\n  declarations: [\r\n    AppComponent, AboutComponent\r\n  ],\r\n  bootstrap: [ AppComponent ]\r\n})\r\nexport class AppModule { }\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app.module.ts\n **/","import { SharedModule } from './../common/shared.module';\nimport { ReviewService } from './review.service';\nimport { FormsModule } from '@angular/forms';\nimport { ReviewFormComponent } from './review-form.component';\nimport { CommonModule } from '@angular/common';\nimport { ReviewsRoutesModule } from './reviews-routes.module';\nimport { ReviewListComponent } from './review-list.component';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [ CommonModule, ReviewsRoutesModule, FormsModule, SharedModule ],\n    declarations: [ReviewListComponent, ReviewFormComponent],\n    providers: [ReviewService]\n})\nexport class ReviewsModule {}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/reviews/reviews.module.ts\n **/","import { DragAndDropDirective } from './drag-and-drop.directive';\r\nimport { RestHelperService } from './rest-helper.service';\r\nimport { NoImagePipe } from './no-image.pipe';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n    declarations: [NoImagePipe, DragAndDropDirective],\r\n    exports: [NoImagePipe, DragAndDropDirective],\r\n    providers: [RestHelperService]\r\n})\r\nexport class SharedModule {}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/common/shared.module.ts\n **/","import { Directive, HostListener, ElementRef, EventEmitter, Output } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bkDragDrop]'\r\n})\r\nexport class DragAndDropDirective {\r\n\r\n    constructor(private el: ElementRef) { }\r\n\r\n    @Output() onDropped: EventEmitter<any> = new EventEmitter();\r\n\r\n    @HostListener('dragover', ['$event']) onDragOver(event: DragEvent) {\r\n        event.preventDefault();\r\n        this.el.nativeElement.style = 'border: 1px solid black';\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event']) onDragLeave(event: DragEvent) {\r\n        event.preventDefault();\r\n        this.el.nativeElement.style = 'border: none';\r\n    }\r\n\r\n    @HostListener('drop', ['$event']) onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        this.el.nativeElement.style = 'border: none';\r\n        this.onDropped.emit(event);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/common/drag-and-drop.directive.ts\n **/","import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\n\r\n@Injectable()\r\nexport class RestHelperService {\r\n\r\n    url: string = (process.env.ENV === 'production')\r\n        ? \"http://localhost:5555/api/bookreactions/\"\r\n        : \"http://localhost:3000/api/bookreactions/\";\r\n\r\n    headers = new Headers({\r\n        'content-type': 'application/json'\r\n    });\r\n\r\n    handleError(error: any) {\r\n        return Promise.reject(this.buildErrorString(error));\r\n    }\r\n\r\n    buildErrorString(error: any) {\r\n        return error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/common/rest-helper.service.ts\n **/","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'noImage'})\r\nexport class NoImagePipe implements PipeTransform {\r\n  transform(value: string, defaultImage: string): string {\r\n    defaultImage = defaultImage ? defaultImage: '/public/images/NoImage.png';\r\n    return value ? value : defaultImage;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/common/no-image.pipe.ts\n **/","import { RestHelperService } from './../common/rest-helper.service';\r\nimport { Injectable } from '@angular/core';\r\nimport Review from './../models/Review.model';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n\r\n@Injectable()\r\nexport class ReviewService {\r\n\r\n    constructor(private http: Http, private restHelper : RestHelperService) { }\r\n\r\n\r\n    getReviews(bookId: number) {\r\n        return this.http.get(this.restHelper.url + \"Reviews/\" + bookId)\r\n            .toPromise().then(res => res.json()).catch(this.restHelper.handleError);\r\n    }\r\n\r\n    addReview(review: Review) {\r\n        let headers = new Headers({\r\n            'content-type': 'application/json'\r\n        });\r\n        return this.http.post(this.restHelper.url + \"Reviews\", review, {\r\n            headers: headers\r\n        }).toPromise().then(res => res.json()).catch(this.restHelper.handleError);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/reviews/review.service.ts\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toPromise_1 = require('../../operator/toPromise');\nObservable_1.Observable.prototype.toPromise = toPromise_1.toPromise;\n//# sourceMappingURL=toPromise.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/toPromise.js\n ** module id = 31\n ** module chunks = 0\n **/","\"use strict\";\nvar root_1 = require('../util/root');\n/* tslint:disable:max-line-length */\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nfunction toPromise(PromiseCtor) {\n    var _this = this;\n    if (!PromiseCtor) {\n        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n            PromiseCtor = root_1.root.Rx.config.Promise;\n        }\n        else if (root_1.root.Promise) {\n            PromiseCtor = root_1.root.Promise;\n        }\n    }\n    if (!PromiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return new PromiseCtor(function (resolve, reject) {\n        var value;\n        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n    });\n}\nexports.toPromise = toPromise;\n//# sourceMappingURL=toPromise.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/operator/toPromise.js\n ** module id = 32\n ** module chunks = 0\n **/","/**\n * @license Angular v2.4.0\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *  Base class for control directives.\n      * *\n      * Only used internally in the forms module.\n      * *\n     * @abstract\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.errors : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.statusChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valueChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (this.control)\n                this.control.reset(value);\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.hasError(errorCode, path) : false;\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.getError(errorCode, path) : null;\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  A directive that contains multiple {@link NgControl}s.\n      * *\n      * Only used by the forms module.\n      * *\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             *  Get the form to which this container belongs.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             *  Get the path to this container.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     *  Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n\n    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function isEmptyInputValue(value) {\n        return value == null || typeof value === 'string' && value.length === 0;\n    }\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     *  Provides a set of validators used by form controls.\n      * *\n      * A validator is a function that processes a {@link FormControl} or collection of\n      * controls and returns a map of errors. A null map means that validation has passed.\n      * *\n      * ### Example\n      * *\n      * ```typescript\n      * var loginControl = new FormControl(\"\", Validators.required)\n      * ```\n      * *\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         *  Validator that requires controls to have a non-empty value.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.required = function (control) {\n            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n        };\n        /**\n         *  Validator that requires control value to be true.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.requiredTrue = function (control) {\n            return control.value === true ? null : { 'required': true };\n        };\n        /**\n         *  Validator that requires controls to have a value of a minimum length.\n         * @param {?} minLength\n         * @return {?}\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         *  Validator that requires controls to have a value of a maximum length.\n         * @param {?} maxLength\n         * @return {?}\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         *  Validator that requires a control to match a regex to its value.\n         * @param {?} pattern\n         * @return {?}\n         */\n        Validators.pattern = function (pattern) {\n            if (!pattern)\n                return Validators.nullValidator;\n            var /** @type {?} */ regex;\n            var /** @type {?} */ regexStr;\n            if (typeof pattern === 'string') {\n                regexStr = \"^\" + pattern + \"$\";\n                regex = new RegExp(regexStr);\n            }\n            else {\n                regexStr = pattern.toString();\n                regex = pattern;\n            }\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ value = control.value;\n                return regex.test(value) ? null :\n                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n            };\n        };\n        /**\n         *  No-op validator.\n         * @param {?} c\n         * @return {?}\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         *  Compose multiple validators into a single function that returns the union\n          * of the individual error maps.\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.compose = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        /**\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.composeAsync = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} arrayOfErrors\n     * @return {?}\n     */\n    function _mergeErrors(arrayOfErrors) {\n        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return Object.keys(res).length === 0 ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true,\n    };\n    /**\n     *  The accessor for writing a value and listening to changes on a checkbox input element.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n      * ```\n      * *\n      * @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return CheckboxControlValueAccessor;\n    }());\n\n    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The default accessor for writing a value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"text\" name=\"searchQuery\" ngModel>\n      * ```\n      * *\n      * @stable\n     */\n    var DefaultValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeAsyncValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n\n    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The accessor for writing a number value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"number\" [(ngModel)]=\"age\">\n      * ```\n     */\n    var NumberValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @return {?}\n     */\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     *  A base class that all control directive extend.\n      * It binds a {@link FormControl} object to a DOM element.\n      * *\n      * Used internally by Angular forms.\n      * *\n     * @abstract\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @abstract\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        /**\n         * @param {?} control\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n                if (this._accessors[i][1] === accessor) {\n                    this._accessors.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        /**\n         * @param {?} controlPair\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = function () { return []; };\n        return RadioControlRegistry;\n    }());\n    /**\n     *  *\n      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n      * to keep the view synced with the {@link FormControl} model.\n      * *\n      * *\n      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n      * value accessor will be active on any radio control that has a form directive. You do\n      * **not** need to add a special selector to activate it.\n      * *\n      * ### How to use radio buttons with form directives\n      * *\n      * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n      * in the same group have the same `name` attribute.  Radio buttons with different `name`\n      * attributes do not affect each other.\n      * *\n      * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n      * *\n      * When using radio buttons in a reactive form, radio buttons in the same group should have the\n      * same `formControlName`. You can also add a `name` attribute, but it's optional.\n      * *\n      * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * @stable\n     */\n    var RadioControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         * @param {?} _registry\n         * @param {?} _injector\n         */\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ]; };\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The accessor for writing a range value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"range\" [(ngModel)]=\"age\" >\n      * ```\n     */\n    var RangeValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function RangeValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RangeValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [RANGE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RangeValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return RangeValueAccessor;\n    }());\n\n    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     *  *\n      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n      * to keep the view synced with the {@link FormControl} model.\n      * *\n      * *\n      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n      * value accessor will be active on any select control that has a form directive. You do\n      * **not** need to add a special selector to activate it.\n      * *\n      * ### How to use select controls with form directives\n      * *\n      * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n      * attribute to the main `<select>` tag.\n      * *\n      * If your option values are simple strings, you can bind to the normal `value` property\n      * on the option.  If your option values happen to be objects (and you'd like to save the\n      * selection in your form as an object), use `ngValue` instead:\n      * *\n      * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n      * *\n      * In reactive forms, you'll also want to add your form directive (`formControlName` or\n      * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n      * choice of binding to the  `value` or `ngValue` property on the select's options.\n      * *\n      * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n      * *\n      * Note: We listen to the 'change' event because 'input' events aren't fired\n      * for selects in Firefox and IE:\n      * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n      * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var SelectControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectControlValueAccessor;\n    }());\n    /**\n     *  *\n      * *\n      * See docs for {@link SelectControlValueAccessor} for usage examples.\n      * *\n     */\n    var NgSelectOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select)\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._setElementValue(value);\n                if (this._select)\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString$1(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (typeof value === 'string')\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     *  The accessor for writing a value and listening to changes on a select element.\n      * *\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            var /** @type {?} */ optionSelectedStateSetter;\n            if (Array.isArray(value)) {\n                // convert values to ids\n                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n            }\n            else {\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n            }\n            this._optionMap.forEach(optionSelectedStateSetter);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var /** @type {?} */ selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var /** @type {?} */ options = _.selectedOptions;\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var /** @type {?} */ options = (_.options);\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        if (opt.selected) {\n                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                _this.value = selected;\n                fn(selected);\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var /** @type {?} */ id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId$1(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     *  Marks `<option>` as dynamic, so Angular can be notified when options change.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <select multiple name=\"city\" ngModel>\n      * <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n      * </select>\n      * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    /**\n     * @param {?} name\n     * @param {?} parent\n     * @return {?}\n     */\n    function controlPath(name, parent) {\n        return parent.path.concat([name]);\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpControl(control, dir) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        if (control)\n            control._clearChangeFns();\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    /**\n     * @param {?} dir\n     * @param {?} message\n     * @return {?}\n     */\n    function _throwError(dir, message) {\n        var /** @type {?} */ messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    /**\n     * @param {?} changes\n     * @param {?} viewModel\n     * @return {?}\n     */\n    function isPropertyUpdated(changes, viewModel) {\n        if (!changes.hasOwnProperty('model'))\n            return false;\n        var /** @type {?} */ change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    var /** @type {?} */ BUILTIN_ACCESSORS = [\n        CheckboxControlValueAccessor,\n        RangeValueAccessor,\n        NumberValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n    ];\n    /**\n     * @param {?} valueAccessor\n     * @return {?}\n     */\n    function isBuiltInAccessor(valueAccessor) {\n        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n    }\n    /**\n     * @param {?} dir\n     * @param {?} valueAccessors\n     * @return {?}\n     */\n    function selectValueAccessor(dir, valueAccessors) {\n        if (!valueAccessors)\n            return null;\n        var /** @type {?} */ defaultAccessor;\n        var /** @type {?} */ builtinAccessor;\n        var /** @type {?} */ customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (v.constructor === DefaultValueAccessor) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (builtinAccessor)\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (customAccessor)\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (customAccessor)\n            return customAccessor;\n        if (builtinAccessor)\n            return builtinAccessor;\n        if (defaultAccessor)\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n      * *\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             *  Get the {@link FormGroup} backing this binding.\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             *  Get the path to this control group.\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             *  Get the {@link Form} to which this group belongs.\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        /**\n         * @param {?} cd\n         */\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var /** @type {?} */ ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid',\n        '[class.ng-pending]': 'ngClassPending',\n    };\n    /**\n     *  Directive automatically applied to Angular form controls that sets CSS classes\n      * based on control status (valid/invalid/dirty/etc).\n      * *\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = function () { return [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     *  Directive automatically applied to Angular form groups that sets CSS classes\n      * based on control status (valid/invalid/dirty/etc).\n      * *\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  Use by directives and components to emit custom Events.\n      * *\n      * ### Examples\n      * *\n      * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n      * title gets clicked:\n      * *\n      * ```\n      * selector: 'zippy',\n      * template: `\n      * <div class=\"zippy\">\n      * <div (click)=\"toggle()\">Toggle</div>\n      * <div [hidden]=\"!visible\">\n      * <ng-content></ng-content>\n      * </div>\n      * </div>`})\n      * export class Zippy {\n      * visible: boolean = true;\n      * @Output() open: EventEmitter<any> = new EventEmitter();\n      * @Output() close: EventEmitter<any> = new EventEmitter();\n      * *\n      * toggle() {\n      * this.visible = !this.visible;\n      * if (this.visible) {\n      * this.open.emit(null);\n      * } else {\n      * this.close.emit(null);\n      * }\n      * }\n      * }\n      * ```\n      * *\n      * The events payload can be accessed by the parameter `$event` on the components output event\n      * handler:\n      * *\n      * ```\n      * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n      * ```\n      * *\n      * Uses Rx.Observable but provides an adapter to make it work as specified here:\n      * https://github.com/jhusain/observable-spec\n      * *\n      * Once a reference implementation of the spec is available, switch to it.\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         *  Creates an instance of [EventEmitter], which depending on [isAsync],\n          * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var /** @type {?} */ VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var /** @type {?} */ INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var /** @type {?} */ PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var /** @type {?} */ DISABLED = 'DISABLED';\n    /**\n     * @param {?} control\n     * @param {?} path\n     * @param {?} delimiter\n     * @return {?}\n     */\n    function _find(control, path, delimiter) {\n        if (path == null)\n            return null;\n        if (!(path instanceof Array)) {\n            path = ((path)).split(delimiter);\n        }\n        if (path instanceof Array && (path.length === 0))\n            return null;\n        return ((path)).reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return v.controls[name] || null;\n            }\n            if (v instanceof FormArray) {\n                return v.at(/** @type {?} */ (name)) || null;\n            }\n            return null;\n        }, control);\n    }\n    /**\n     * @param {?} r\n     * @return {?}\n     */\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    /**\n     * @param {?} asyncValidator\n     * @return {?}\n     */\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     *  {@link FormArray}.\n      * *\n      * It provides some of the shared behavior that all controls and groups of controls have, like\n      * running validators, calculating status, and resetting state. It also defines the properties\n      * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n      * instantiated directly.\n      * *\n     * @abstract\n     */\n    var AbstractControl = (function () {\n        /**\n         * @param {?} validator\n         * @param {?} asyncValidator\n         */\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n            /** @internal */\n            this._onDisabledChange = [];\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             *  The value of the control.\n             * @return {?}\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n            /**\n             *  The parent control.\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             *  The validation status of the control. There are four possible\n              * validation statuses:\n              * *\n              * * **VALID**:  control has passed all validation checks\n              * * **INVALID**: control has failed at least one validation check\n              * * **PENDING**: control is in the midst of conducting a validation check\n              * * **DISABLED**: control is exempt from validation checks\n              * *\n              * These statuses are mutually exclusive, so a control cannot be\n              * both valid AND invalid or invalid AND disabled.\n             * @return {?}\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             *  A control is `valid` when its `status === VALID`.\n              * *\n              * In order to have this status, the control must have passed all its\n              * validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             *  A control is `invalid` when its `status === INVALID`.\n              * *\n              * In order to have this status, the control must have failed\n              * at least one of its validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             *  A control is `pending` when its `status === PENDING`.\n              * *\n              * In order to have this status, the control must be in the\n              * middle of conducting a validation check.\n             * @return {?}\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             *  A control is `disabled` when its `status === DISABLED`.\n              * *\n              * Disabled controls are exempt from validation checks and\n              * are not included in the aggregate value of their ancestor\n              * controls.\n             * @return {?}\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             *  A control is `enabled` as long as its `status !== DISABLED`.\n              * *\n              * In other words, it has a status of `VALID`, `INVALID`, or\n              * `PENDING`.\n             * @return {?}\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             *  Returns any errors generated by failing validation. If there\n              * are no errors, it will return null.\n             * @return {?}\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             *  A control is `pristine` if the user has not yet changed\n              * the value in the UI.\n              * *\n              * Note that programmatic changes to a control's value will\n              * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             *  A control is `dirty` if the user has changed the value\n              * in the UI.\n              * *\n              * Note that programmatic changes to a control's value will\n              * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n             *  A control is marked `touched` once the user has triggered\n              * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             *  A control is `untouched` if the user has not yet triggered\n              * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             *  Emits an event every time the value of the control changes, in\n              * the UI or programmatically.\n             * @return {?}\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             *  Emits an event every time the validation status of the control\n              * is re-calculated.\n             * @return {?}\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the synchronous validators that are active on this control.  Calling\n          * this will overwrite any existing sync validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         *  Sets the async validators that are active on this control. Calling this\n          * will overwrite any existing async validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         *  Empties out the sync validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         *  Empties out the async validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         *  Marks the control as `touched`.\n          * *\n          * This will also mark all direct ancestors as `touched` to maintain\n          * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = true;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `untouched`.\n          * *\n          * If the control has any children, it will also mark all children as `untouched`\n          * to maintain the model, and re-calculate the `touched` status of all parent\n          * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `dirty`.\n          * *\n          * This will also mark all direct ancestors as `dirty` to maintain\n          * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = false;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `pristine`.\n          * *\n          * If the control has any children, it will also mark all children as `pristine`\n          * to maintain the model, and re-calculate the `pristine` status of all parent\n          * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `pending`.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._status = PENDING;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Disables the control. This means the control will be exempt from validation checks and\n          * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n          * *\n          * If the control has children, all children will be disabled to maintain the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n        };\n        /**\n         *  Enables the control. This means the control will be included in validation checks and\n          * the aggregate value of its parent. Its status is re-calculated based on its value and\n          * its validators.\n          * *\n          * If the control has children, all children will be enabled.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n        };\n        /**\n         * @param {?} onlySelf\n         * @return {?}\n         */\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        /**\n         * @param {?} parent\n         * @return {?}\n         */\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         *  Sets the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.setValue = function (value, options) { };\n        /**\n         *  Patches the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.patchValue = function (value, options) { };\n        /**\n         *  Resets the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?=} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.reset = function (value, options) { };\n        /**\n         *  Re-calculates the value and validation status of the control.\n          * *\n          * By default, it will also update the value and validity of its ancestors.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._runValidator = function () {\n            return this.validator ? this.validator(this) : null;\n        };\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (this.asyncValidator) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription =\n                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (this._asyncValidationSubscription) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         *  Sets errors on a form control.\n          * *\n          * This is used when validations are run manually by the user, rather than automatically.\n          * *\n          * Calling `setErrors` will also update the validity of the parent control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const login = new FormControl(\"someLogin\");\n          * login.setErrors({\n          * \"notUnique\": true\n          * });\n          * *\n          * expect(login.valid).toEqual(false);\n          * expect(login.errors).toEqual({\"notUnique\": true});\n          * *\n          * login.setValue(\"someOtherLogin\");\n          * *\n          * expect(login.valid).toEqual(true);\n          * ```\n         * @param {?} errors\n         * @param {?=} __1\n         * @return {?}\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent !== false);\n        };\n        /**\n         *  Retrieves a child control given the control's name or path.\n          * *\n          * Paths can be passed in as an array or a string delimited by a dot.\n          * *\n          * To get a control nested within a `person` sub-group:\n          * *\n          * * `this.form.get('person.name');`\n          * *\n          * -OR-\n          * *\n          * * `this.form.get(['person', 'name']);`\n         * @param {?} path\n         * @return {?}\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         *  Returns true if the control with the given path has the error specified. Otherwise\n          * returns null or undefined.\n          * *\n          * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var /** @type {?} */ control = path ? this.get(path) : this;\n            return control && control._errors ? control._errors[errorCode] : null;\n        };\n        /**\n         *  Returns true if the control with the given path has the error specified. Otherwise\n          * returns false.\n          * *\n          * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return !!this.getError(errorCode, path);\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             *  Retrieves the top-level ancestor of this control.\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ x = this;\n                while (x._parent) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (this._errors)\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._updateValue = function () { };\n        /**\n         * @abstract\n         * @param {?} cb\n         * @return {?}\n         */\n        AbstractControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @abstract\n         * @param {?} condition\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControls = function (condition) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._allControlsDisabled = function () { };\n        /**\n         * @param {?} status\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status === status; });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return typeof formState === 'object' && formState !== null &&\n                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     *  *\n      * It is one of the three fundamental building blocks of Angular forms, along with\n      * {@link FormGroup} and {@link FormArray}.\n      * *\n      * *\n      * When instantiating a {@link FormControl}, you can pass in an initial value as the\n      * first argument. Example:\n      * *\n      * ```ts\n      * const ctrl = new FormControl('some value');\n      * console.log(ctrl.value);     // 'some value'\n      * *```\n      * *\n      * You can also initialize the control with a form state object on instantiation,\n      * which includes both the value and whether or not the control is disabled.\n      * You can't use the value key without the disabled key; both are required\n      * to use this way of initialization.\n      * *\n      * ```ts\n      * const ctrl = new FormControl({value: 'n/a', disabled: true});\n      * console.log(ctrl.value);     // 'n/a'\n      * console.log(ctrl.status);   // 'DISABLED'\n      * ```\n      * *\n      * To include a sync validator (or an array of sync validators) with the control,\n      * pass it in as the second argument. Async validators are also supported, but\n      * have to be passed in separately as the third arg.\n      * *\n      * ```ts\n      * const ctrl = new FormControl('', Validators.required);\n      * console.log(ctrl.value);     // ''\n      * console.log(ctrl.status);   // 'INVALID'\n      * ```\n      * *\n      * See its superclass, {@link AbstractControl}, for more properties and methods.\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        /**\n         * @param {?=} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         *  Set the value of the form control to `value`.\n          * *\n          * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n          * and not its parent component. This defaults to false.\n          * *\n          * If `emitEvent` is `true`, this\n          * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n          * to true (as it falls through to `updateValueAndValidity`).\n          * *\n          * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n          * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n          * specified.\n          * *\n          * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n          * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange !== false) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of a control.\n          * *\n          * This function is functionally the same as {@link FormControl.setValue} at this level.\n          * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n          * where it does behave differently.\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         *  Resets the form control. This means by default:\n          * *\n          * * it is marked as `pristine`\n          * * it is marked as `untouched`\n          * * value is set to null\n          * *\n          * You can also reset to a specific form state by passing through a standalone\n          * value or a form state object that contains both a value and a disabled state\n          * (these are the only two properties that cannot be calculated).\n          * *\n          * Ex:\n          * *\n          * ```ts\n          * this.control.reset('Nancy');\n          * *\n          * console.log(this.control.value);  // 'Nancy'\n          * ```\n          * *\n          * OR\n          * *\n          * ```\n          * this.control.reset({value: 'Nancy', disabled: true});\n          * *\n          * console.log(this.control.value);  // 'Nancy'\n          * console.log(this.control.status);  // 'DISABLED'\n          * ```\n         * @param {?=} formState\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         *  Register a listener for change events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = [];\n            this._onCollectionChange = function () { };\n        };\n        /**\n         *  Register a listener for disabled events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) {\n            this._onDisabledChange.push(fn);\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     *  instances.\n      * *\n      * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n      * with each control name as the key.  It calculates its status by reducing the statuses\n      * of its children. For example, if one of the controls in a group is invalid, the entire\n      * group becomes invalid.\n      * *\n      * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n      * along with {@link FormControl} and {@link FormArray}.\n      * *\n      * *\n      * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n      * argument. The key for each child will be the name under which it is registered.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const form = new FormGroup({\n      * first: new FormControl('Nancy', Validators.minLength(2)),\n      * last: new FormControl('Drew'),\n      * });\n      * *\n      * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n      * console.log(form.status);  // 'VALID'\n      * ```\n      * *\n      * You can also include group-level validators as the second arg, or group-level async\n      * validators as the third arg. These come in handy when you want to perform validation\n      * that considers the value of more than one child control.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const form = new FormGroup({\n      * password: new FormControl('', Validators.minLength(2)),\n      * passwordConfirm: new FormControl('', Validators.minLength(2)),\n      * }, passwordMatchValidator);\n      * *\n      * *\n      * function passwordMatchValidator(g: FormGroup) {\n      * return g.get('password').value === g.get('passwordConfirm').value\n      * ? null : {'mismatch': true};\n      * }\n      * ```\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         *  Registers a control with the group's list of controls.\n          * *\n          * This method does not update value or validity of the control, so for\n          * most cases you'll want to use {@link FormGroup.addControl} instead.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         *  Add a control to this group.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Remove a control from this group.\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Replace an existing control.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Check whether there is an enabled control with the given name in the group.\n          * *\n          * It will return false for disabled controls. If you'd like to check for\n          * existence in the group only, use {@link AbstractControl.get} instead.\n         * @param {?} controlName\n         * @return {?}\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n          * the structure of the group, with control names as keys.\n          * *\n          * This method performs strict checks, so it will throw an error if you try\n          * to set the value of a control that doesn't exist or if you exclude the\n          * value of a control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const form = new FormGroup({\n          * first: new FormControl(),\n          * last: new FormControl()\n          * });\n          * console.log(form.value);   // {first: null, last: null}\n          * *\n          * form.setValue({first: 'Nancy', last: 'Drew'});\n          * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n          * *\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            Object.keys(value).forEach(function (name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n          * names as keys, and will do its best to match the values to the correct controls\n          * in the group.\n          * *\n          * It accepts both super-sets and sub-sets of the group without throwing an error.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const form = new FormGroup({\n          * first: new FormControl(),\n          * last: new FormControl()\n          * });\n          * console.log(form.value);   // {first: null, last: null}\n          * *\n          * form.patchValue({first: 'Nancy'});\n          * console.log(form.value);   // {first: 'Nancy', last: null}\n          * *\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            Object.keys(value).forEach(function (name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Resets the {@link FormGroup}. This means by default:\n          * *\n          * * The group and all descendants are marked `pristine`\n          * * The group and all descendants are marked `untouched`\n          * * The value of all descendants will be null or null maps\n          * *\n          * You can also reset to a specific form state by passing in a map of states\n          * that matches the structure of your form, with control names as keys. The state\n          * can be a standalone value or a form state object with both a value and a disabled\n          * status.\n          * *\n          * ### Example\n          * *\n          * ```ts\n          * this.form.reset({first: 'name', last: 'last name'});\n          * *\n          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n          * ```\n          * *\n          * - OR -\n          * *\n          * ```\n          * this.form.reset({\n          * first: {value: 'name', disabled: true},\n          * last: 'last'\n          * });\n          * *\n          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n          * console.log(this.form.get('first').status);  // 'DISABLED'\n          * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         *  The aggregate value of the {@link FormGroup}, including any disabled controls.\n          * *\n          * If you'd like to include all values regardless of disabled status, use this method.\n          * Otherwise, the `value` property is the best way to get the value of the group.\n         * @return {?}\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormGroup.prototype._forEachChild = function (cb) {\n            var _this = this;\n            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var /** @type {?} */ res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /**\n         * @param {?} initValue\n         * @param {?} fn\n         * @return {?}\n         */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var /** @type {?} */ res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     *  instances.\n      * *\n      * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n      * It calculates its status by reducing the statuses of its children. For example, if one of\n      * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n      * *\n      * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n      * along with {@link FormControl} and {@link FormGroup}.\n      * *\n      * *\n      * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n      * argument.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const arr = new FormArray([\n      * new FormControl('Nancy', Validators.minLength(2)),\n      * new FormControl('Drew'),\n      * ]);\n      * *\n      * console.log(arr.value);   // ['Nancy', 'Drew']\n      * console.log(arr.status);  // 'VALID'\n      * ```\n      * *\n      * You can also include array-level validators as the second arg, or array-level async\n      * validators as the third arg. These come in handy when you want to perform validation\n      * that considers the value of more than one child control.\n      * *\n      * ### Adding or removing controls\n      * *\n      * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n      * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n      * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n      * the `FormArray` directly, as that will result in strange and unexpected behavior such\n      * as broken change detection.\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         *  Get the {@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         *  Insert a new {@link AbstractControl} at the end of the array.\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Insert a new {@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.insert = function (index, control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Remove the control at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Replace an existing control.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            if (control) {\n                this.controls.splice(index, 0, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             *  Length of the control array.\n             * @return {?}\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n          * the structure of the control.\n          * *\n          * This method performs strict checks, so it will throw an error if you try\n          * to set the value of a control that doesn't exist or if you exclude the\n          * value of a control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const arr = new FormArray([\n          * new FormControl(),\n          * new FormControl()\n          * ]);\n          * console.log(arr.value);   // [null, null]\n          * *\n          * arr.setValue(['Nancy', 'Drew']);\n          * console.log(arr.value);   // ['Nancy', 'Drew']\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n          * structure of the control, and will do its best to match the values to the correct\n          * controls in the group.\n          * *\n          * It accepts both super-sets and sub-sets of the array without throwing an error.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const arr = new FormArray([\n          * new FormControl(),\n          * new FormControl()\n          * ]);\n          * console.log(arr.value);   // [null, null]\n          * *\n          * arr.patchValue(['Nancy']);\n          * console.log(arr.value);   // ['Nancy', null]\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Resets the {@link FormArray}. This means by default:\n          * *\n          * * The array and all descendants are marked `pristine`\n          * * The array and all descendants are marked `untouched`\n          * * The value of all descendants will be null or null maps\n          * *\n          * You can also reset to a specific form state by passing in an array of states\n          * that matches the structure of the control. The state can be a standalone value\n          * or a form state object with both a value and a disabled status.\n          * *\n          * ### Example\n          * *\n          * ```ts\n          * this.arr.reset(['name', 'last name']);\n          * *\n          * console.log(this.arr.value);  // ['name', 'last name']\n          * ```\n          * *\n          * - OR -\n          * *\n          * ```\n          * this.arr.reset([\n          * {value: 'name', disabled: true},\n          * 'last'\n          * ]);\n          * *\n          * console.log(this.arr.value);  // ['name', 'last name']\n          * console.log(this.arr.get(0).status);  // 'DISABLED'\n          * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         *  The aggregate value of the array, including any disabled controls.\n          * *\n          * If you'd like to include all values regardless of disabled status, use this method.\n          * Otherwise, the `value` property is the best way to get the value of the array.\n         * @return {?}\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n    /**\n     *  to track aggregate form value and validation status.\n      * *\n      * *\n      * As soon as you import the `FormsModule`, this directive becomes active by default on\n      * all `<form>` tags.  You don't need to add a special selector.\n      * *\n      * You can export the directive into a local template variable using `ngForm` as the key\n      * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n      * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n      * will give you access to the aggregate value and validity status of the form, as well as\n      * user interaction properties like `dirty` and `touched`.\n      * *\n      * To register child controls with the form, you'll want to use {@link NgModel} with a\n      * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n      * sub-groups within the form.\n      * *\n      * You can listen to the directive's `ngSubmit` event to be notified when the user has\n      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n      * submission event.\n      * *\n      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `FormsModule`\n      * *\n      * @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                dir._control = (container.registerControl(dir.name, dir.control));\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                var /** @type {?} */ group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n                ctrl.setValue(value);\n            });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        NgForm.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return path.length ? (this.form.get(path)) : this.form;\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     *  *\n      * *\n      * This directive can only be used as a child of {@link NgForm} (or in other words,\n      * within `<form>` tags).\n      * *\n      * Use this directive if you'd like to create a sub-group within a form. This can\n      * come in handy if you want to validate a sub-group of your form separately from\n      * the rest of your form, or if some values in your domain model make more sense to\n      * consume together in a nested object.\n      * *\n      * Pass in the name you'd like this sub-group to have and it will become the key\n      * for the sub-group in the form's full value. You can also export the directive into\n      * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n      * *\n      * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `FormsModule`\n      * *\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    /**\n     * `ngModel` forces an additional change detection run when its inputs change:\n     * E.g.:\n     * ```\n     * <div>{{myModel.valid}}</div>\n     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n     * ```\n     * I.e. `ngModel` can export itself on the element and then be used in the template.\n     * Normally, this would result in expressions before the `input` that use the exported directive\n     * to have and old value as they have been\n     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n     * detection run.\n     *\n     * Notes:\n     * - this is just one extra run no matter how many `ngModel` have been changed.\n     * - this is a general problem when using `exportAs` for directives!\n     */\n    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n    /**\n     *  to a form control element.\n      * *\n      * The {@link FormControl} instance will track the value, user interaction, and\n      * validation status of the control and keep the view synced with the model. If used\n      * within a parent form, the directive will also register itself with the form as a child\n      * control.\n      * *\n      * *\n      * This directive can be used by itself or as part of a larger form. All you need is the\n      * `ngModel` selector to activate it.\n      * *\n      * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n      * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n      * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n      * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n      * the domain model in your class as well.\n      * *\n      * If you wish to inspect the properties of the associated {@link FormControl} (like\n      * validity state), you can also export the directive into a local template variable using\n      * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n      * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n      * will fall through to the control anyway, so you can access them directly. You can see a\n      * full list of properties directly available in {@link AbstractControlDirective}.\n      * *\n      * The following is an example of a simple standalone control using `ngModel`:\n      * *\n      * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n      * *\n      * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n      * so that the control can be registered with the parent form under that name.\n      * *\n      * It's worth noting that in the context of a parent form, you often can skip one-way or\n      * two-way binding because the parent form will sync the value for you. You can access\n      * its properties by exporting it into a local template variable using `ngForm` (ex:\n      * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n      * *\n      * If you do need to populate initial values into your form, using a one-way binding for\n      * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n      * than the domain model's value on submit.\n      * *\n      * Take a look at an example of using `ngModel` within a form:\n      * *\n      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n      * *\n      * To see `ngModel` examples with different form control types, see:\n      * *\n      * * Radio buttons: {@link RadioControlValueAccessor}\n      * * Selects: {@link SelectControlValueAccessor}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: `FormsModule`\n      * *\n      * @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     *  *\n      * In other words, this directive ensures that any values written to the {@link FormControl}\n      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n      * any values written to the DOM element through user input will be reflected in the\n      * {@link FormControl} instance (view -> model).\n      * *\n      * *\n      * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n      * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n      * {@link FormControlDirective}.\n      * *\n      * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n      * it does not require that your {@link FormControl} instance be part of any parent\n      * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n      * exists above it.\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormControl} instance. See a full list of available properties in\n      * {@link AbstractControl}.\n      * *\n      * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n      * or you can set it programmatically later using {@link AbstractControl.setValue} or\n      * {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n      * @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                }\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return changes.hasOwnProperty('form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     *  *\n      * *\n      * This directive accepts an existing {@link FormGroup} instance. It will then use this\n      * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n      * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n      * and {@link FormArrayName} directives.\n      * *\n      * **Set value**: You can set the form's initial value when instantiating the\n      * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n      * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n      * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n      * re-calculated.\n      * *\n      * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n      * submission event.\n      * *\n      * ### Example\n      * *\n      * In this example, we create form controls for first name and last name.\n      * *\n      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: {@link ReactiveFormsModule}\n      * *\n      * @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        /**\n         * @param {?} _validators\n         * @param {?} _asyncValidators\n         */\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (changes.hasOwnProperty('form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n            ctrl.setValue(value);\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateValidators = function () {\n            var /** @type {?} */ sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (!this.form) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     *  *\n      * *\n      * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the nested {@link FormGroup} you want to link, and\n      * will look for a {@link FormGroup} registered with that name in the parent\n      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n      * *\n      * Nested form groups can come in handy when you want to validate a sub-group of a\n      * form separately from the rest or when you'd like to group the values of certain\n      * controls into their own nested object.\n      * *\n      * **Access the group**: You can access the associated {@link FormGroup} using the\n      * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n      * *\n      * You can also access individual controls within the group using dot syntax.\n      * Ex: `this.form.get('name.first')`\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set the value**: You can set an initial value for each child control when instantiating\n      * the {@link FormGroup}, or you can set it programmatically later using\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the group, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var /** @type {?} */ formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     *  *\n      * *\n      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the nested {@link FormArray} you want to link, and\n      * will look for a {@link FormArray} registered with that name in the parent\n      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n      * *\n      * Nested form arrays can come in handy when you have a group of form controls but\n      * you're not sure how many there will be. Form arrays allow you to create new\n      * form controls dynamically.\n      * *\n      * **Access the array**: You can access the associated {@link FormArray} using the\n      * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n      * Ex: `this.form.get('cities')`.\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set the value**: You can set an initial value for each child control when instantiating\n      * the {@link FormArray}, or you can set the value programmatically later using the\n      * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n      * methods.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the array, you can\n      * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n      * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n      * status is re-calculated.\n      * *\n      * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n      * calling its {@link FormArray.push} method.\n      * Ex: `this.form.get('cities').push(new FormControl());`\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? (this._parent.formDirective) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     *  element by name.\n      * *\n      * In other words, this directive ensures that any values written to the {@link FormControl}\n      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n      * any values written to the DOM element through user input will be reflected in the\n      * {@link FormControl} instance (view -> model).\n      * *\n      * *\n      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the {@link FormControl} instance you want to\n      * link, and will look for a {@link FormControl} registered with that name in the\n      * closest {@link FormGroup} or {@link FormArray} above it.\n      * *\n      * **Access the control**: You can access the {@link FormControl} associated with\n      * this directive by using the {@link AbstractControl.get} method.\n      * Ex: `this.form.get('first');`\n      * *\n      * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n      * See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set value**: You can set an initial value for the control when instantiating the\n      * {@link FormControl}, or you can set it programmatically later using\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * In this example, we create form controls for first name and last name.\n      * *\n      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n      * *\n      * To see `formControlName` examples with different form control types, see:\n      * *\n      * * Radio buttons: {@link RadioControlValueAccessor}\n      * * Selects: {@link SelectControlValueAccessor}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: {@link ReactiveFormsModule}\n      * *\n      * @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n        multi: true\n    };\n    /**\n     *  A Directive that adds the `required` validator to any controls marked with the\n      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input name=\"fullName\" ngModel required>\n      * ```\n      * *\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._required; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._required = value != null && value !== false && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = function () { return []; };\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     *  A Directive that adds the `required` validator to checkbox controls marked with the\n      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input type=\"checkbox\" name=\"active\" ngModel required>\n      * ```\n      * *\n     */\n    var CheckboxRequiredValidator = (function (_super) {\n        __extends$13(CheckboxRequiredValidator, _super);\n        function CheckboxRequiredValidator() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        CheckboxRequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.requiredTrue(c) : null;\n        };\n        CheckboxRequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n        return CheckboxRequiredValidator;\n    }(RequiredValidator));\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     *  A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n      * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n      * *\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('minlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MinLengthValidator.prototype.validate = function (c) {\n            return this.minlength == null ? null : this._validator(c);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = function () { return []; };\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     *  A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n      * `formControl`,\n      * or control with `ngModel` that also has a `maxlength` attribute.\n      * *\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('maxlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.validate = function (c) {\n            return this.maxlength != null ? this._validator(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = function () { return []; };\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var /** @type {?} */ PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     *  A Directive that adds the `pattern` validator to any controls marked with the\n      * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n      * as the regex to validate Control value against.  Follows pattern attribute\n      * semantics; i.e. regex must match entire Control value.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n      * ```\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if ('pattern' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = function () { return []; };\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     *  *\n      * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n      * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n      * forms.\n      * *\n      * *\n      * To use, inject `FormBuilder` into your component class. You can then call its methods\n      * directly.\n      * *\n      * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: {@link ReactiveFormsModule}\n      * *\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         *  Construct a new {@link FormGroup} with the given map of configuration.\n          * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n          * *\n          * See the {@link FormGroup} constructor for more details.\n         * @param {?} controlsConfig\n         * @param {?=} extra\n         * @return {?}\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         *  Construct a new {@link FormControl} with the given `formState`,`validator`, and\n          * `asyncValidator`.\n          * *\n          * `formState` can either be a standalone value for the form control or an object\n          * that contains both a value and a disabled status.\n          * *\n         * @param {?} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         *  Construct a {@link FormArray} from the given `controlsConfig` array of\n          * configuration, with the given optional `validator` and `asyncValidator`.\n         * @param {?} controlsConfig\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /**\n         * @param {?} controlsConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var /** @type {?} */ controls = {};\n            Object.keys(controlsConfig).forEach(function (controlName) {\n                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n            });\n            return controls;\n        };\n        /**\n         * @param {?} controlConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (Array.isArray(controlConfig)) {\n                var /** @type {?} */ value = controlConfig[0];\n                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = function () { return []; };\n        return FormBuilder;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.0');\n\n    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n        NgSelectOption,\n        NgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n    ];\n    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     *  Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: SHARED_FORM_DIRECTIVES,\n                        exports: SHARED_FORM_DIRECTIVES,\n                    },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = function () { return []; };\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     *  The ng module for forms.\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = function () { return []; };\n        return FormsModule;\n    }());\n    /**\n     *  The ng module for reactive forms.\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = function () { return []; };\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.VERSION = VERSION;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular/forms/bundles/forms.umd.js\n ** module id = 33\n ** module chunks = 0\n **/","import { ReviewService } from './review.service';\r\nimport { ReviewsModule } from './reviews.module';\r\nimport { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport Review from '../models/Review.model';\r\n\r\n@Component({\r\n    selector: 'review-form',\r\n    template: `<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\r\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\r\n                 </div>\r\n                <form class=\"form-group form-inline col-sm-offset-1\" novalidate #reviewForm=\"ngForm\" name=\"reviewForm\" (ngSubmit)=\"submit()\">\r\n                    <label class=\"control-label\">Review:\r\n                    <input class=\"form-control\" required minlength=\"5\" type=\"text\" name=\"content\" #content=\"ngModel\" [(ngModel)]=\"review.content\" />\r\n                    </label>\r\n                    <button class=\"btn btn-primary\" [disabled]=\"!reviewForm.form.valid\" type=\"submit\">Add Review</button>\r\n                   <div *ngIf=\"!(content.valid || content.pristine)\">\r\n                     <div *ngIf=\"content.errors.required\" class=\"alert alert-danger\">\r\n                        Review must have content\r\n                    </div>\r\n                    <div *ngIf=\"content.errors.minlength\" class=\"alert alert-danger\">\r\n                        Review must be at least 5 characters long\r\n                    </div>\r\n                  </div>\r\n                </form>`\r\n})\r\nexport class ReviewFormComponent implements OnInit {\r\n\r\n    @Output() reviewAdded = new EventEmitter();\r\n    @Input() bookId: number;\r\n    errorMessage: string;\r\n    review: Review;\r\n\r\n    constructor(private reviewService: ReviewService) { }\r\n    \r\n    ngOnInit() {\r\n        this.review = new Review(\"\", this.bookId);\r\n    }\r\n\r\n    submit() {\r\n        this.errorMessage = \"\";\r\n        this.reviewService.addReview(this.review)\r\n            .then(() => { this.reviewAdded.emit(); })\r\n            .catch(error => this.errorMessage = error);\r\n    }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/reviews/review-form.component.ts\n **/","export default class Review {\r\n    constructor ( public content: string,\r\n                  public bookId: number) {}\r\n}\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/models/Review.model.ts\n **/","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ReviewListComponent } from './review-list.component';\r\n\r\nconst reviewsRoutes: Routes = [\r\n   {\r\n    path: 'reviews/:id',\r\n    component: ReviewListComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(reviewsRoutes) ],\r\n  exports: [   RouterModule ]\r\n})\r\nexport class ReviewsRoutesModule { }\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/reviews/reviews-routes.module.ts\n **/","import { routeChange } from '../common/animations';\r\nimport { BookService } from './../books/book.service';\r\nimport { ReviewService } from './review.service';\r\nimport { ReviewFormComponent } from './review-form.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport Review from '../models/Review.model';\r\nimport Book from '../models/Book.model';\r\n\r\n@Component({\r\n    selector: 'review-list',\r\n    template: `<div class=\"container-fluid mainPanel\">    \r\n                 <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\r\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\r\n                 </div>  \r\n                <div class=\"row\">\r\n                  <div class=\"col-sm-offset-1 col-sm-3\">\r\n                       <h2>{{book?.title}} <br>\r\n                       by {{book?.author}}</h2>\r\n                   </div>\r\n                    <div class=\"col-sm-3\">\r\n                       <img  src=\"{{book?.cover | noImage }}\" alt=\"{{book?.title + ' book cover'}}\" />\r\n                    </div>  \r\n                </div>               \r\n                 <div class=\"row\">\r\n                    <h2 class=\"col-sm-offset-1\">Reviews for {{book?.title}}</h2>\r\n                    <review-form [bookId]=bookId (reviewAdded)=\"getReviews()\"></review-form>\r\n                    <div class=\"col-lg-8 col-sm-offset-1\">\r\n                        <table class=\"table table-border table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Review</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let review of reviews\">\r\n                                      <td>{{review.content}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n              </div>`,\r\n    animations: [routeChange()],\r\n    host: { '[@routeChange]': '' }\r\n})\r\nexport class ReviewListComponent implements OnInit {\r\n\r\n    book: Book;\r\n    errorMessage: string;\r\n    reviews: Review[];\r\n    bookId: number = -1;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private reviewService: ReviewService,\r\n        private bookService: BookService) { }\r\n\r\n    ngOnInit() {\r\n        this.bookId = +this.route.snapshot.params['id'];\r\n        this.bookService.getBook(this.bookId).then(book => this.book = book).catch(error => this.errorMessage = error);\r\n        this.getReviews();\r\n      }\r\n\r\n    getReviews() {\r\n      this.reviewService.getReviews(this.bookId).then(reviews => this.reviews = reviews).catch(error => this.errorMessage = error);\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/reviews/review-list.component.ts\n **/","import { trigger, state, style, transition, animate, keyframes } from '@angular/core';\r\n\r\nexport function routeChange() {\r\n    return trigger('routeChange', [\r\n        state('void', style({ position: 'fixed', width: '100%' })),\r\n        transition(':enter', [\r\n            style({ transform: 'translateX(100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            animate('0.1s ease-in-out', style({ opacity: '0' }))\r\n        ])\r\n    ]);\r\n}\r\n\r\n\r\nexport function slideUp() {\r\n  return trigger('slideUp', [\r\n    transition(':enter', [\r\n      animate(400, keyframes([\r\n        style({transform: 'translateY(+200%)', offset: 0}),\r\n        style({transform: 'translateY(10px)', offset: 0.6}),\r\n        style({transform: 'translateY(0)', offset: 1.0})\r\n      ]))\r\n    ])\r\n  ])\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/common/animations.ts\n **/","import { Observable } from 'rxjs/Observable';\r\nimport { RestHelperService } from './../common/rest-helper.service';\r\nimport { Injectable } from '@angular/core';\r\nimport Book from './../models/Book.model';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class BookService {\r\n\r\n    constructor(private http: Http, private restHelper: RestHelperService) { }\r\n\r\n    getBooks() {\r\n        return this.http.get(this.restHelper.url + \"Books\")\r\n            .map(res => res.json());\r\n    }\r\n\r\n    getBooksByTitle(title: string) {\r\n        if (title) {\r\n            return this.http.get(this.restHelper.url + \"BooksByTitle/\" + title)\r\n                .map(res => res.json());\r\n        }\r\n        else {\r\n            return this.getBooks();\r\n        }\r\n    }\r\n\r\n    getBook(bookId: number) {\r\n        return this.http.get(this.restHelper.url + \"Book/\" + bookId)\r\n            .toPromise().then(res => res.json() as Book).catch(this.restHelper.handleError);\r\n    }\r\n\r\n    addBook(book: Book) {\r\n        let headers = new Headers({\r\n            'content-type': 'application/json'\r\n        });\r\n\r\n        return this.http.post(this.restHelper.url + \"Books\", book, {\r\n            headers: headers\r\n        }).toPromise()\r\n            .then(res => res.json() as Book).catch(this.restHelper.handleError);\r\n\r\n    }\r\n\r\n    private handleObservableError(error: any) {\r\n        return Observable.throw(this.restHelper.buildErrorString(error));\r\n    }\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/books/book.service.ts\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/catch.js\n ** module id = 72\n ** module chunks = 0\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/map.js\n ** module id = 73\n ** module chunks = 0\n **/","import { NgModule } from '@angular/core';\r\nimport { AboutComponent } from './about.component';\r\nimport { BookListComponent } from './books/book-list.component';\r\nimport { Routes, RouterModule} from '@angular/router';\r\n\r\nconst routes: Routes = [ \r\n    {\r\n        path: '',\r\n        component: BookListComponent\r\n    },\r\n    {\r\n        path: 'about',\r\n        component: AboutComponent\r\n    },\r\n    {\r\n        path: '**', \r\n        redirectTo: '/'\r\n    }];\r\n    \r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [ RouterModule]\r\n})\r\nexport class AppRoutesModule { }\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app-routes.module.ts\n **/","import { Component } from '@angular/core';\r\nimport { routeChange } from './common/animations';\r\n\r\n@Component({\r\n    selector: 'about',\r\n    template: require('./about.component.html'),\r\n    animations: [routeChange()],\r\n    host: { '[@routeChange]': '' }\r\n})\r\nexport class AboutComponent {}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/about.component.ts\n **/","module.exports = \"<div class=\\\"row\\\">\\r\\n    <h2>Angles on Books</h2>\\r\\n</div>\\r\\n<div>\\r\\n    Where you can give your angle on books.\\r\\n</div>\\r\\n\\t\\t\\t\\t\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/about.component.html\n ** module id = 76\n ** module chunks = 0\n **/","import { routeChange, slideUp } from '../common/animations';\r\nimport { BookService } from './book.service';\r\nimport { BooksModule } from './books.module';\r\nimport { Component, Input } from '@angular/core';\r\nimport Book from './../models/Book.model';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/switchMap';\r\n\r\n\r\n@Component({\r\n    selector: 'book-list',\r\n    template: `<div class=\"container-fluid mainPanel\">\r\n                <div class=\"row\">\r\n                    <h2 class=\"col-sm-offset-1\">Books</h2>\r\n                    <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\r\n                        Sorry, there's been an error communicating with the server: {{errorMessage}}\r\n                    </div>                \r\n                    <book-form (createBook)=\"addBook($event)\"></book-form>\r\n                    <div class=\"col-lg-8 col-sm-offset-1\">\r\n                        <table class=\"table table-border table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Title</th>\r\n                                    <th>Author</th>\r\n                                    <th>Cover</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colspan=\"3\">\r\n                                        <label>Search by title: <input #term (keyup)=\"search(term.value)\"  /></label>\r\n                                    </td>\r\n                                </tr>                                    \r\n                            </thead>\r\n                            <tbody>\r\n                                <tr [@slideUp] *ngFor=\"let book of books | async; trackBy:trackBook\">\r\n                                      <td><a [routerLink]=\"['/reviews/' + book.bookId]\">{{book.title}}</a></td>\r\n                                    <td>{{book.author}}</td>\r\n                                    <td><img  src=\"{{book.cover | noImage}}\" alt=\"{{book.title + ' book cover'}}\" /></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n              </div>`,\r\n    animations: [routeChange(), slideUp()],\r\n    host: { '[@routeChange]': '' }\r\n})\r\nexport class BookListComponent {\r\n\r\n    searchTermStream: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\r\n    books: Observable<Book[]> = this.searchTermStream\r\n        .debounceTime(500)\r\n        .switchMap((term: string) => this.bookService.getBooksByTitle(term))\r\n        .catch(error => this.errorMessage = error);\r\n\r\n    errorMessage: string;\r\n    constructor(private bookService: BookService) { }\r\n\r\n    search(term: string) {\r\n        this.searchTermStream.next(term);\r\n    }\r\n\r\naddBook(book: Book) {\r\n   this.bookService.addBook(book).then(() => {\r\n        this.search(\"\");\r\n   }).catch(error => this.errorMessage = error);\r\n}\r\n\r\n\r\n\r\n\r\n    trackBook(i: number, book: Book): number {\r\n        return book.bookId;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/books/book-list.component.ts\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/debounceTime.js\n ** module id = 78\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/operator/debounceTime.js\n ** module id = 79\n ** module chunks = 0\n **/","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/scheduler/async.js\n ** module id = 80\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.delay = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/scheduler/AsyncAction.js\n ** module id = 81\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/scheduler/Action.js\n ** module id = 82\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/scheduler/AsyncScheduler.js\n ** module id = 83\n ** module chunks = 0\n **/","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/Scheduler.js\n ** module id = 84\n ** module chunks = 0\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/operator/switchMap.js\n ** module id = 85\n ** module chunks = 0\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:disable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return this.lift(new SwitchMapOperator(project, resultSelector));\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/operator/switchMap.js\n ** module id = 86\n ** module chunks = 0\n **/","import { SharedModule } from './../common/shared.module';\r\nimport { BookService } from './book.service';\r\nimport { NoImagePipe } from './../common/no-image.pipe';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BookFormComponent } from './book-form.component';\r\nimport { BookListComponent } from './book-list.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n    imports: [ CommonModule, ReactiveFormsModule, RouterModule, SharedModule ],\r\n    providers: [BookService],\r\n    declarations: [BookListComponent, BookFormComponent],\r\n    exports: [BookListComponent]\r\n})\r\nexport class BooksModule {}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/books/books.module.ts\n **/","import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport Book from './../models/Book.model';\r\n\r\n@Component({\r\n    selector: 'book-form',\r\n    template: `<form class=\"form-group form-inline col-sm-offset-1\" novalidate [formGroup]=\"bookForm\" (ngSubmit)=\"add()\">\r\n                <label class=\"control-label\">Title:\r\n                <input type=\"text\" class=\"form-control\" formControlName=\"title\" /></label>\r\n\t\t        <label class=\"control-label\">Author:\r\n                <input type=\"text\" class=\"form-control\" formControlName=\"author\" /></label>\r\n                <div class=\"form-group form-inline\" >\r\n                    <img  src=\"{{cover | noImage}}\"  bkDragDrop (onDropped)=\"onDrop($event)\" />\r\n                </div> \r\n      \t\t    <button type=\"submit\" class=\"btn btn-primary\"  [disabled]=\"!bookForm.valid\">Add Book</button>             \r\n                <div *ngIf=\"bookForm.get('title').hasError('required') && !bookForm.get('title').pristine\" class=\"alert alert-danger\">\r\n                    Title is required\r\n                </div>\r\n                <div *ngIf=\"bookForm.get('title').hasError('minlength') && !bookForm.get('author').pristine && !bookForm.get('title').pristine\" class=\"alert alert-danger\">\r\n                    Title must be at least 3 characters\r\n                </div> \r\n                <div *ngIf=\"bookForm.get('title').hasError('pattern') && !bookForm.get('title').pristine\" class=\"alert alert-danger\">\r\n                    Only letters and numbers are allowed\r\n                </div>               \r\n                <div *ngIf=\"bookForm.get('author').hasError('required') && !bookForm.get('author').pristine\" class=\"alert alert-danger\">\r\n                    Author is required\r\n                </div>\r\n               </form>`\r\n})\r\nexport class BookFormComponent implements OnInit, OnDestroy {\r\n\r\n    cover: string = \"\";\r\n    sub: any;\r\n    bookForm: FormGroup;\r\n\r\n    constructor(private formBuilder: FormBuilder) {    }\r\n\r\n    ngOnInit() {\r\n        this.bookForm = this.formBuilder.group({\r\n            title:  [\"\", Validators.compose([Validators.required, Validators.minLength(3), Validators.pattern(\"^[a-zA-Z0-9 ]*$\")])],\r\n            author: [\"\", Validators.required]\r\n        });\r\n\r\n        this.sub = this.bookForm.valueChanges\r\n            .subscribe((value) => {\r\n                value.title = this.toTitleCase(value.title);\r\n                this.bookForm.patchValue({title: value.title}, { emitEvent: false });\r\n                //debug code\r\n                // console.log(\"Form  value = \", value);\r\n            });\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n         this.sub.unsubscribe();\r\n    }\r\n\r\n    @Output() createBook  = new EventEmitter();\r\n\r\n    add() {\r\n        this.createBook.emit(new Book(this.bookForm.get('title').value, \r\n                                      this.bookForm.get('author').value, \r\n                                      this.cover, -1));\r\n        this.bookForm.reset();\r\n        this.cover = '';\r\n    }\r\n\r\n    toTitleCase(s: string) {\r\n        if ((s === null) || (s === '')) {\r\n            return '';\r\n        }\r\n        return s.replace(/\\w\\S*/g, (t: string) => {\r\n            return t.charAt(0).toUpperCase() + t.substr(1).toLowerCase();\r\n        });\r\n    }\r\n\r\n onDrop(e: any) {\r\n        let comp = this;\r\n        let size: number = 160;\r\n        let oldHeight: number;\r\n        let oldWidth: number;\r\n        let newHeight: number;\r\n        let newWidth: number;\r\n        let files = e.target.files || e.dataTransfer.files;\r\n        if (files && files.length > 0) {\r\n            let f = files[0];\r\n            let reader = new FileReader();\r\n            reader.onload = (function (f) {\r\n                return function (e2: any) {\r\n                    let image: HTMLImageElement = new Image();\r\n                    image.onload = function () {\r\n                        oldHeight = (<HTMLImageElement>this).height;\r\n                        oldWidth = (<HTMLImageElement>this).width;\r\n                        newHeight = oldHeight;\r\n                        newWidth = oldWidth;\r\n                        if (oldHeight > size) {\r\n                            newHeight = size;\r\n                            newWidth = (newHeight * oldWidth) / oldHeight;\r\n                        }\r\n                        if (newWidth > size) {\r\n                            let oldWidth = newWidth;\r\n                            newWidth = size;\r\n                            newHeight = (newWidth * newHeight) / oldWidth;\r\n                        }\r\n                        let canvas = document.createElement(\"canvas\");\r\n                        let ctx = canvas.getContext(\"2d\");\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(image, 0, 0, newWidth, newHeight);\r\n                        //your code here        \r\n                       comp.cover = canvas.toDataURL(f.type);\r\n                    };\r\n                    image.src = e2.target.result;\r\n                };\r\n            })(f);\r\n            reader.readAsDataURL(f);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/books/book-form.component.ts\n **/","export default class Book {\r\n    constructor ( public title: string,\r\n                  public  author: string, \r\n                  public  cover: string,  \r\n                  public  bookId: number) {}\r\n}\r\n\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/models/Book.model.ts\n **/","import Book from './models/Book.model';\r\nimport { BookListComponent } from './books/book-list.component';\r\nimport { Component } from '@angular/core';\r\nimport '../../public/css/bootstrap.min.css';\r\nimport '../../public/css/styles.css';\r\n\r\n\r\n@Component({\r\n  selector: 'my-app',\r\n  template: `<h1>Welcome to {{name}}</h1>\r\n             <div class=\"row navbar navbar-default\">\r\n                 <ul class=\"nav navbar-nav\">\r\n                    <li>\r\n                      <a  routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">home</a>\r\n                    </li>\r\n                    <li>\r\n                      <a  routerLink=\"/about\" routerLinkActive=\"active\">about</a>\r\n                    </li>\r\n                 </ul>\r\n             </div>\r\n             <div class=\"container-fluid\">\r\n                  <router-outlet></router-outlet>\r\n             </div>`,\r\n    styles: ['.active { font-weight: bold; border: 1px solid black }']\r\n})\r\nexport class AppComponent  { \r\n  name = 'Angles On Books';\r\n }\r\n\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app.component.ts\n **/"],"sourceRoot":""}